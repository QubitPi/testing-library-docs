"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[5390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5850:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={id:"intro",title:"Introduction"},p=void 0,l={unversionedId:"user-event/intro",id:"user-event/intro",title:"Introduction",description:"user-event is a companion",source:"@site/docs/user-event/intro.mdx",sourceDirName:"user-event",slug:"/user-event/intro",permalink:"/docs/user-event/intro",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/user-event/intro.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"intro",title:"Introduction"},sidebar:"docs",previous:{title:"WebdriverIO Testing Library",permalink:"/docs/webdriverio-testing-library/intro"},next:{title:"Installation",permalink:"/docs/user-event/install"}},c={},u=[{value:"Differences from <code>fireEvent</code>",id:"differences-from-fireevent",level:2},{value:"Writing tests with <code>userEvent</code>",id:"writing-tests-with-userevent",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/testing-library/user-event"},(0,a.kt)("inlineCode",{parentName:"a"},"user-event"))," is a companion\nlibrary for Testing Library that simulates user interactions by dispatching the\nevents that would happen if the interaction took place in a browser."),(0,a.kt)("admonition",{title:"Latest version",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These docs describe ",(0,a.kt)("inlineCode",{parentName:"p"},"user-event@14"),". We recommend updating your projects to this\nversion, as it includes important bug fixes and new features. You can find the\ndocs for ",(0,a.kt)("inlineCode",{parentName:"p"},"user-event@13.5.0")," ",(0,a.kt)("a",{parentName:"p",href:"/docs/user-event/v13"},"here"),", and the\nchangelog for the release\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/testing-library/user-event/releases/tag/v14.0.0"},"here"),".")),(0,a.kt)("p",null,"While most examples with ",(0,a.kt)("inlineCode",{parentName:"p"},"user-event")," are for ",(0,a.kt)("inlineCode",{parentName:"p"},"React"),", the library can be used\nwith any framework as long as there is a DOM."),(0,a.kt)("h2",{id:"differences-from-fireevent"},"Differences from ",(0,a.kt)("inlineCode",{parentName:"h2"},"fireEvent")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fireEvent")," dispatches ",(0,a.kt)("em",{parentName:"p"},"DOM events"),", whereas ",(0,a.kt)("inlineCode",{parentName:"p"},"user-event")," simulates full\n",(0,a.kt)("em",{parentName:"p"},"interactions"),", which may fire multiple events and do additional checks along\nthe way."),(0,a.kt)("p",null,"Testing Library's built-in\n",(0,a.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-events#fireevent"},(0,a.kt)("inlineCode",{parentName:"a"},"fireEvent"))," is a lightweight\nwrapper around the browser's low-level ",(0,a.kt)("inlineCode",{parentName:"p"},"dispatchEvent")," API, which allows\ndevelopers to trigger any event on any element. The problem is that the browser\nusually does more than just trigger one event for one interaction. For example,\nwhen a user types into a text box, the element has to be focused, and then\nkeyboard and input events are fired and the selection and value on the element\nare manipulated as they type."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"user-event")," allows you to describe a user interaction instead of a concrete\nevent. It adds visibility and interactability checks along the way and\nmanipulates the DOM just like a user interaction in the browser would. It\nfactors in that the browser e.g. wouldn't let a user click a hidden element or\ntype in a disabled text box.",(0,a.kt)("br",{parentName:"p"}),"\n","This is\n",(0,a.kt)("a",{parentName:"p",href:"https://ph-fritsche.github.io/blog/post/why-userevent"},"why you should use ",(0,a.kt)("inlineCode",{parentName:"a"},"user-event")),"\nto test interaction with your components."),(0,a.kt)("p",null,"There are, however, some user interactions or aspects of these\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/testing-library/user-event/issues?q=is%3Aopen+label%3Aaccuracy%2Cenhancement"},"that aren't yet implemented and thus can't yet be described with ",(0,a.kt)("inlineCode",{parentName:"a"},"user-event")),".\nIn these cases you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"fireEvent")," to dispatch the concrete events that your\nsoftware relies on."),(0,a.kt)("p",null,"Note that this makes your component and/or test reliant upon your assumptions\nabout the concrete aspects of the interaction being correct. Therefore if you\nalready put in the work to specify the correct aspects of such interaction,\nplease consider contributing to this project so that ",(0,a.kt)("inlineCode",{parentName:"p"},"user-event")," might cover\nthese cases too."),(0,a.kt)("h2",{id:"writing-tests-with-userevent"},"Writing tests with ",(0,a.kt)("inlineCode",{parentName:"h2"},"userEvent")),(0,a.kt)("p",null,"We recommend invoking ",(0,a.kt)("a",{parentName:"p",href:"/docs/user-event/setup"},(0,a.kt)("inlineCode",{parentName:"a"},"userEvent.setup()"))," before the component is\nrendered. This can be done in the test itself, or by using a setup function. We\ndiscourage rendering or using any ",(0,a.kt)("inlineCode",{parentName:"p"},"userEvent")," functions outside of the test\nitself - e.g. in a ",(0,a.kt)("inlineCode",{parentName:"p"},"before"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"after")," hook - for reasons described in\n",(0,a.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/avoid-nesting-when-youre-testing"},'"Avoid Nesting When You\'re Testing"'),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import userEvent from '@testing-library/user-event'\n\n// inlining\ntest('trigger some awesome feature when clicking the button', async () => {\n  const user = userEvent.setup()\n  // Import `render` and `screen` from the framework library of your choice.\n  // See https://testing-library.com/docs/dom-testing-library/install#wrappers\n  render(<MyComponent />)\n\n  await user.click(screen.getByRole('button', {name: /click me!/i}))\n\n  // ...assertions...\n})\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import userEvent from '@testing-library/user-event'\n\n// setup function\nfunction setup(jsx) {\n  return {\n    user: userEvent.setup(),\n    // Import `render` from the framework library of your choice.\n    // See https://testing-library.com/docs/dom-testing-library/install#wrappers\n    ...render(jsx),\n  }\n}\n\ntest('render with a setup function', async () => {\n  const {user} = setup(<MyComponent />)\n  // ...\n})\n")),(0,a.kt)("p",null,"Note that, while directly invoking APIs such as ",(0,a.kt)("inlineCode",{parentName:"p"},"userEvent.click()")," (which will\ntrigger ",(0,a.kt)("inlineCode",{parentName:"p"},"setup")," internally) is\n",(0,a.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/user-event/setup#direct-apis"},"still supported in v14"),",\nthis option exists to ease the migration from v13 to v14, and for simple tests.\nWe recommend using the methods on the instances returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"userEvent.setup()"),"."))}m.isMDXComponent=!0}}]);