"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[3808],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=i,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8165:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var n=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],s={id:"setup",title:"Setup",sidebar_label:"Setup"},l=void 0,u={unversionedId:"react-native-testing-library/setup",id:"react-native-testing-library/setup",title:"Setup",description:"Setting up your project",source:"@site/docs/react-native-testing-library/setup.mdx",sourceDirName:"react-native-testing-library",slug:"/react-native-testing-library/setup",permalink:"/docs/react-native-testing-library/setup",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/react-native-testing-library/setup.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"setup",title:"Setup",sidebar_label:"Setup"},sidebar:"docs",previous:{title:"Example",permalink:"/docs/react-native-testing-library/example-intro"},next:{title:"Introduction",permalink:"/docs/solid-testing-library/intro"}},p={},c=[{value:"Setting up your project",id:"setting-up-your-project",level:2},{value:"Custom Render",id:"custom-render",level:2},{value:"Configuring Jest with Test Utils",id:"configuring-jest-with-test-utils",level:3}],d={toc:c};function m(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"setting-up-your-project"},"Setting up your project"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"React Native Testing Library")," API should work out of the box for most\ntests. All of the snippets you'll find throughout the website work without any\nadditional configuration assuming you use Jest and a moderately recent version\nof React Native."),(0,o.kt)("h2",{id:"custom-render"},"Custom Render"),(0,o.kt)("p",null,"It's often useful to define a custom render method that includes things like\nglobal context providers, data stores, etc. To make this available globally, one\napproach is to define a utility file that re-exports everything from\n",(0,o.kt)("inlineCode",{parentName:"p"},"React Native Testing Library"),". You can replace ",(0,o.kt)("inlineCode",{parentName:"p"},"React Native Testing Library"),"\nwith this file in all your imports. See\n",(0,o.kt)("a",{parentName:"p",href:"#configuring-jest-with-test-utils"},"below")," for a way to make your test util file\naccessible without using relative paths."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="my-component.test.js"',title:'"my-component.test.js"'},"- import { render, fireEvent } from '@testing-library/react-native';\n+ import { render, fireEvent } from '../test-utils';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="test-utils.js"',title:'"test-utils.js"'},"import {render} from '@testing-library/react-native'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (ui, options) =>\n  render(ui, {wrapper: AllTheProviders, ...options})\n\n// re-export everything\nexport * from '@testing-library/react-native'\n\n// override render method\nexport {customRender as render}\n")),(0,o.kt)("h3",{id:"configuring-jest-with-test-utils"},"Configuring Jest with Test Utils"),(0,o.kt)("p",null,"To make your custom test file accessible in your Jest test files without using\nrelative imports (",(0,o.kt)("inlineCode",{parentName:"p"},"../../test-utils"),"), add the folder containing the file to the\nJest ",(0,o.kt)("inlineCode",{parentName:"p"},"moduleDirectories")," option."),(0,o.kt)("p",null,"This will make all the ",(0,o.kt)("inlineCode",{parentName:"p"},".js")," files in the test-utils directory importable\nwithout ",(0,o.kt)("inlineCode",{parentName:"p"},"../"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="my-component.test.js"',title:'"my-component.test.js"'},"- import { render, fireEvent } from '../test-utils';\n+ import { render, fireEvent } from 'test-utils';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="jest.config.js"',title:'"jest.config.js"'},"module.exports = {\n  moduleDirectories: [\n    'node_modules',\n+   // add the directory with the test-utils.js file, for example:\n+   'utils', // a utility folder\n+    __dirname, // the root directory\n  ],\n  // ... other options ...\n}\n")))}m.isMDXComponent=!0}}]);