"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[1320],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(t),v=a,m=d["".concat(l,".").concat(v)]||d[v]||p[v]||o;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2388:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>v,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),c=["components"],s={id:"convenience",title:"Convenience APIs"},l=void 0,i={unversionedId:"user-event/convenience",id:"user-event/convenience",title:"Convenience APIs",description:"The following APIs are shortcuts for equivalent calls to the underlying",source:"@site/docs/user-event/api-convenience.mdx",sourceDirName:"user-event",slug:"/user-event/convenience",permalink:"/docs/user-event/convenience",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/user-event/api-convenience.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"convenience",title:"Convenience APIs"},sidebar:"docs",previous:{title:"Utility APIs",permalink:"/docs/user-event/utility"},next:{title:"user-event v13",permalink:"/docs/user-event/v13"}},u={},p=[{value:"Clicks",id:"clicks",level:2},{value:"click()",id:"click",level:3},{value:"dblClick()",id:"dblclick",level:3},{value:"tripleClick()",id:"tripleclick",level:3},{value:"Mouse movement",id:"mouse-movement",level:2},{value:"hover()",id:"hover",level:3},{value:"unhover()",id:"unhover",level:3},{value:"Keyboard",id:"keyboard",level:2},{value:"tab()",id:"tab",level:3}],d={toc:p};function v(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The following APIs are shortcuts for equivalent calls to the underlying\n",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/pointer"},(0,o.kt)("inlineCode",{parentName:"a"},"pointer()"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/keyboard"},(0,o.kt)("inlineCode",{parentName:"a"},"keyboard()"))," APIs."),(0,o.kt)("h2",{id:"clicks"},"Clicks"),(0,o.kt)("h3",{id:"click"},"click()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"click(element: Element): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"pointer([{target: element}, {keys: '[MouseLeft]', target: element}])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"test('click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.click(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(1)\n  expect(checkbox).toBeChecked()\n})\n")),(0,o.kt)("p",null,"The first action might be skipped per ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/options#skiphover"},(0,o.kt)("inlineCode",{parentName:"a"},"skipHover")),"."),(0,o.kt)("h3",{id:"dblclick"},"dblClick()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"dblClick(element: Element): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"pointer([{target: element}, {keys: '[MouseLeft][MouseLeft]', target: element}])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"test('double click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.dblClick(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(2)\n  expect(checkbox).not.toBeChecked()\n})\n")),(0,o.kt)("h3",{id:"tripleclick"},"tripleClick()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"tripleClick(element: Element): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"pointer([\n  {target: element},\n  {keys: '[MouseLeft][MouseLeft][MouseLeft]', target: element},\n])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"test('triple click', async () => {\n  const onChange = jest.fn()\n  const user = userEvent.setup()\n\n  render(<input type=\"checkbox\" onChange={onChange} />)\n\n  const checkbox = screen.getByRole('checkbox')\n\n  await user.tripleClick(checkbox)\n\n  expect(onChange).toHaveBeenCalledTimes(3)\n  expect(checkbox).toBeChecked()\n})\n")),(0,o.kt)("h2",{id:"mouse-movement"},"Mouse movement"),(0,o.kt)("h3",{id:"hover"},"hover()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"hover(element: Element): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"pointer({target: element})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"test('hover/unhover', async () => {\n  const user = userEvent.setup()\n  render(<div>Hover</div>)\n\n  const hoverBox = screen.getByText('Hover')\n  let isHover = false\n\n  hoverBox.addEventListener('mouseover', () => {\n    isHover = true\n  })\n  hoverBox.addEventListener('mouseout', () => {\n    isHover = false\n  })\n\n  expect(isHover).toBeFalsy()\n\n  await user.hover(hoverBox)\n\n  expect(isHover).toBeTruthy()\n\n  await user.unhover(hoverBox)\n\n  expect(isHover).toBeFalsy()\n})\n")),(0,o.kt)("h3",{id:"unhover"},"unhover()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"unhover(element: Element): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"pointer({target: element.ownerDocument.body})\n")),(0,o.kt)("h2",{id:"keyboard"},"Keyboard"),(0,o.kt)("h3",{id:"tab"},"tab()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"tab(options: {shift?: boolean}): Promise<void>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// without shift\nkeyboard('{Tab}')\n// with shift=true\nkeyboard('{Shift>}{Tab}{/Shift}')\n// with shift=false\nkeyboard('[/ShiftLeft][/ShiftRight]{Tab}')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"test('tab', async () => {\n  const user = userEvent.setup()\n  render(\n    <div>\n      <input type=\"checkbox\" />\n      <input type=\"radio\" />\n      <input type=\"number\" />\n    </div>,\n  )\n\n  const checkbox = screen.getByRole('checkbox')\n  const radio = screen.getByRole('radio')\n  const number = screen.getByRole('spinbutton')\n\n  expect(document.body).toHaveFocus()\n\n  await user.tab()\n\n  expect(checkbox).toHaveFocus()\n\n  await user.tab()\n\n  expect(radio).toHaveFocus()\n\n  await user.tab()\n\n  expect(number).toHaveFocus()\n\n  await user.tab()\n\n  // cycle goes back to the body element\n  expect(document.body).toHaveFocus()\n\n  // simulate Shift-Tab\n  await user.tab({shift: true})\n\n  expect(number).toHaveFocus()\n})\n")))}v.isMDXComponent=!0}}]);