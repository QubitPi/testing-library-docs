"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[3991],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||s[c]||o;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"api",title:"API",sidebar_label:"API"},p=void 0,d={unversionedId:"svelte-testing-library/api",id:"svelte-testing-library/api",title:"API",description:"@testing-library/svelte re-exports everything from",source:"@site/docs/svelte-testing-library/api.mdx",sourceDirName:"svelte-testing-library",slug:"/svelte-testing-library/api",permalink:"/docs/svelte-testing-library/api",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/svelte-testing-library/api.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api",title:"API",sidebar_label:"API"},sidebar:"docs",previous:{title:"Setup",permalink:"/docs/svelte-testing-library/setup"},next:{title:"FAQ",permalink:"/docs/svelte-testing-library/faq"}},m={},s=[{value:"<code>render</code>",id:"render",level:2},{value:"Component Options",id:"component-options",level:3},{value:"Render Options",id:"render-options",level:3},{value:"Render Results",id:"render-results",level:3},{value:"<code>baseElement</code>",id:"baseelement",level:4},{value:"<code>container</code>",id:"container",level:4},{value:"<code>component</code>",id:"component",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>rerender</code>",id:"rerender",level:4},{value:"<code>unmount</code>",id:"unmount",level:4},{value:"Queries",id:"queries",level:4},{value:"<code>cleanup</code>",id:"cleanup",level:2},{value:"<code>act</code>",id:"act",level:2},{value:"<code>fireEvent</code> (async)",id:"fireevent-async",level:2}],u={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@testing-library/svelte")," re-exports everything from\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api"},(0,o.kt)("inlineCode",{parentName:"a"},"@testing-library/dom")),", as well as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#act"},(0,o.kt)("inlineCode",{parentName:"a"},"act"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cleanup"},(0,o.kt)("inlineCode",{parentName:"a"},"cleanup"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#fireevent-async"},(0,o.kt)("inlineCode",{parentName:"a"},"fireEvent")," (async)"))),(0,o.kt)("h2",{id:"render"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")),(0,o.kt)("p",null,"Render your component to the DOM with Svelte. By default, the component will be\nrendered into a ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," appended to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {render} from '@testing-library/svelte'\nimport MyComponent from './MyComponent.svelte'\n\nconst result = render(MyComponent, componentOptions, renderOptions)\n")),(0,o.kt)("h3",{id:"component-options"},"Component Options"),(0,o.kt)("p",null,"You may customize how the component is created and mounted. These options are\npassed directly to Svelte."),(0,o.kt)("p",null,"If you only need to send props to your component, you may pass props directly,\nas long as those props don't share a name with a component option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// pass props to the component\nrender(YourComponent, {myProp: 'value'})\n\n// pass props and other options to the component\nrender(YourComponent, {\n  props: {myProp: 'value'},\n  context: new Map([[('theme': 'dark')]]),\n})\n")),(0,o.kt)("p",null,"The most common options you will need are:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"props")),(0,o.kt)("td",{parentName:"tr",align:null},"Props to pass to the component."),(0,o.kt)("td",{parentName:"tr",align:null},"N/A")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"context")),(0,o.kt)("td",{parentName:"tr",align:null},"A ",(0,o.kt)("inlineCode",{parentName:"td"},"Map")," of context values to render the component with."),(0,o.kt)("td",{parentName:"tr",align:null},"N/A")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"target")),(0,o.kt)("td",{parentName:"tr",align:null},"An ",(0,o.kt)("inlineCode",{parentName:"td"},"HTMLElement")," to render the component into."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"<div>")," appended to ",(0,o.kt)("inlineCode",{parentName:"td"},"document.body"))))),(0,o.kt)("p",null,"If you specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," option, the ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," element will ",(0,o.kt)("em",{parentName:"p"},"not")," be appended\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body")," automatically, and it will be used as the base element for\n",(0,o.kt)("a",{parentName:"p",href:"#queries"},"bound queries")," and ",(0,o.kt)("a",{parentName:"p",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug")),"."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://svelte.dev/docs/client-side-component-api"},"Svelte client-side component API docs")," for\nall available options."),(0,o.kt)("h3",{id:"render-options"},"Render Options"),(0,o.kt)("p",null,"You may also customize how Svelte Testing Library renders your component. Most\nof the time, you shouldn't need to modify these options."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Prior to ",(0,o.kt)("inlineCode",{parentName:"p"},"@testing-library/svelte@5.0.0"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," option was named\n",(0,o.kt)("inlineCode",{parentName:"p"},"container"),".")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"baseElement")),(0,o.kt)("td",{parentName:"tr",align:null},"The base element for queries and ",(0,o.kt)("a",{parentName:"td",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug")),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"componentOptions.target ?? document.body"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"queries")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/dom-testing-library/api-custom-queries"},"Custom Queries"),"."),(0,o.kt)("td",{parentName:"tr",align:null},"N/A")))),(0,o.kt)("h3",{id:"render-results"},"Render Results"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Result"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))),(0,o.kt)("td",{parentName:"tr",align:null},"The base DOM element used for queries.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#component"},(0,o.kt)("inlineCode",{parentName:"a"},"component"))),(0,o.kt)("td",{parentName:"tr",align:null},"The mounted Svelte component.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#container"},(0,o.kt)("inlineCode",{parentName:"a"},"container"))),(0,o.kt)("td",{parentName:"tr",align:null},"The DOM element the component is mounted to.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug"))),(0,o.kt)("td",{parentName:"tr",align:null},"Log elements using ",(0,o.kt)("a",{parentName:"td",href:"/docs/dom-testing-library/api-debugging#prettydom"},(0,o.kt)("inlineCode",{parentName:"a"},"prettyDOM")),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#rerender"},(0,o.kt)("inlineCode",{parentName:"a"},"rerender"))),(0,o.kt)("td",{parentName:"tr",align:null},"Update the component's props.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#unmount"},(0,o.kt)("inlineCode",{parentName:"a"},"unmount"))),(0,o.kt)("td",{parentName:"tr",align:null},"Unmount and destroy the component.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#queries"},(0,o.kt)("inlineCode",{parentName:"a"},"...queries"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/queries/about"},"Query functions")," bound to ",(0,o.kt)("inlineCode",{parentName:"td"},"baseElement"),".")))),(0,o.kt)("h4",{id:"baseelement"},(0,o.kt)("inlineCode",{parentName:"h4"},"baseElement")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Added in ",(0,o.kt)("inlineCode",{parentName:"em"},"@testing-library/svelte@5.0.0"))),(0,o.kt)("p",null,"The base DOM element that queries are bound to. Corresponds to\n",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.baseElement"),". If you do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"componentOptions.target")," nor\n",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.baseElement"),", this will be ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("h4",{id:"container"},(0,o.kt)("inlineCode",{parentName:"h4"},"container")),(0,o.kt)("p",null,"The DOM element the component is mounted in. Corresponds to\n",(0,o.kt)("inlineCode",{parentName:"p"},"componentOptions.target"),". In general, avoid using ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," directly to query\nfor elements; use ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"testing-library queries")," instead."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"container.firstChild")," to get the first rendered element of your component.")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Prior to ",(0,o.kt)("inlineCode",{parentName:"p"},"@testing-library/svelte@5.0.0"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," was set to the base\nelement. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"container.firstChild.firstChild")," to get the first rendered element\nof the component in earlier versions.")),(0,o.kt)("h4",{id:"component"},(0,o.kt)("inlineCode",{parentName:"h4"},"component")),(0,o.kt)("p",null,"The Svelte component instance. See the ",(0,o.kt)("a",{parentName:"p",href:"https://svelte.dev/docs/client-side-component-api"},"Svelte component\nAPI")," for more details."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Avoid using ",(0,o.kt)("inlineCode",{parentName:"p"},"component")," except to test developer-facing APIs, like exported\nfunctions. Instead, interact with the DOM. Read ",(0,o.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/avoid-the-test-user"},"Avoid the Test User"),"\nby Kent C. Dodds to understand the difference between the ",(0,o.kt)("strong",{parentName:"p"},"end user")," and\n",(0,o.kt)("strong",{parentName:"p"},"developer user"),".")),(0,o.kt)("h4",{id:"debug"},(0,o.kt)("inlineCode",{parentName:"h4"},"debug")),(0,o.kt)("p",null,"Log the ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," or a given element using ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-debugging#prettydom"},(0,o.kt)("inlineCode",{parentName:"a"},"prettyDOM")),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If your ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),", we recommend using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-debugging#screendebug"},(0,o.kt)("inlineCode",{parentName:"a"},"screen.debug")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {render, screen} from '@testing-library/svelte'\n\nconst {debug} = render(MyComponent, {myProp: 'value'})\n\nconst button = screen.getByRole('button')\n\n// log `document.body`\nscreen.debug()\n\n// log your custom `target` or `baseElement`\ndebug()\n\n// log a specific element\nscreen.debug(button)\ndebug(button)\n")),(0,o.kt)("h4",{id:"rerender"},(0,o.kt)("inlineCode",{parentName:"h4"},"rerender")),(0,o.kt)("p",null,"Update one or more of the component's props and wait for Svelte to update."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {rerender} = render(MyComponent, {myProp: 'value'})\n\nawait rerender({myProp: 'new value'}))\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Prior to ",(0,o.kt)("inlineCode",{parentName:"p"},"@testing-library/svelte@5.0.0"),", calling ",(0,o.kt)("inlineCode",{parentName:"p"},"rerender")," would destroy and\nremount the component. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"component.$set")," and ",(0,o.kt)("a",{parentName:"p",href:"#act"},(0,o.kt)("inlineCode",{parentName:"a"},"act"))," to update props in\nearlier versions:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {component} = render(MyComponent, {myProp: 'value'})\n\nawait act(() => component.$set({myProp: 'new value'}))\n"))),(0,o.kt)("h4",{id:"unmount"},(0,o.kt)("inlineCode",{parentName:"h4"},"unmount")),(0,o.kt)("p",null,"Unmount and destroy the Svelte component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {unmount} = render(MyComponent, {myProp: 'value'})\n\nunmount()\n")),(0,o.kt)("h4",{id:"queries"},"Queries"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"Query functions")," bound to the ",(0,o.kt)("a",{parentName:"p",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement")),".\nIf you passed ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-custom-queries"},"custom queries")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),", those will be\navailable instead of the default queries."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If your ",(0,o.kt)("a",{parentName:"p",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))," is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),", we\nrecommend using ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about#screen"},(0,o.kt)("inlineCode",{parentName:"a"},"screen"))," rather than bound queries.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {render, screen} from '@testing-library/svelte'\n\nconst {getByRole} = render(MyComponent, {myProp: 'value'})\n\n// query `document.body`\nconst button = screen.getByRole('button')\n\n// query using a custom `target` or `baseElement`\nconst button = getByRole('button')\n")),(0,o.kt)("h2",{id:"cleanup"},(0,o.kt)("inlineCode",{parentName:"h2"},"cleanup")),(0,o.kt)("p",null,"Destroy all components and remove any elements added to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"cleanup")," is called automatically if your testing framework adds a global\n",(0,o.kt)("inlineCode",{parentName:"p"},"afterEach")," method (e.g. Mocha, Jest, or Jasmine), or if you use\n",(0,o.kt)("inlineCode",{parentName:"p"},"import '@testing-library/svelte/vitest'")," in your ",(0,o.kt)("a",{parentName:"p",href:"/docs/svelte-testing-library/setup#vitest"},"Vitest setup\nfile"),". Usually, you shouldn't need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanup")," yourself."),(0,o.kt)("p",{parentName:"admonition"},"If you'd like to disable automatic cleanup in a framework that uses a global\n",(0,o.kt)("inlineCode",{parentName:"p"},"afterEach")," method, set ",(0,o.kt)("inlineCode",{parentName:"p"},"process.env.STL_SKIP_AUTO_CLEANUP"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {render, cleanup} from '@testing-library/svelte'\n\n// Default: runs after each test\nafterEach(() => {\n  cleanup()\n})\n\nrender(YourComponent)\n\n// Called manually for more control\ncleanup()\n")),(0,o.kt)("h2",{id:"act"},(0,o.kt)("inlineCode",{parentName:"h2"},"act")),(0,o.kt)("p",null,"Ensure all pending updates from Svelte are applied to the DOM. Optionally, you\nmay pass a function to be called before updates are applied. If the function\nreturns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise"),", it will be resolved first."),(0,o.kt)("p",null,"Uses Svelte's ",(0,o.kt)("a",{parentName:"p",href:"https://svelte.dev/docs/svelte#tick"},(0,o.kt)("inlineCode",{parentName:"a"},"tick"))," method to apply updates."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {act, render} from '@testing-library/svelte'\n\nconst {component} = render(MyComponent)\n\nawait act(() => {\n  component.updateSomething()\n})\n")),(0,o.kt)("h2",{id:"fireevent-async"},(0,o.kt)("inlineCode",{parentName:"h2"},"fireEvent")," (async)"),(0,o.kt)("p",null,"Fire an event and wait for Svelte to update the DOM. An asynchronous wrapper of\nDOM Testing Library's ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-events"},(0,o.kt)("inlineCode",{parentName:"a"},"fireEvent")),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Where possible, we recommend ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/intro"},(0,o.kt)("inlineCode",{parentName:"a"},"@testing-library/user-event"))," instead\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"fireEvent"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {fireEvent, render, screen} from '@testing-library/svelte'\n\nrender(MyComponent)\n\nconst button = screen.getByRole('button')\nawait fireEvent.click(button)\n")))}c.isMDXComponent=!0}}]);