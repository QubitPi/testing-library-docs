"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6935],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),v=p(n),d=a,m=v["".concat(l,".").concat(d)]||v[d]||s[d]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=v;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},9875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>u,metadata:()=>p,toc:()=>s});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],u={id:"example-input-event",title:"Input Event",sidebar_label:"Input Event"},l=void 0,p={unversionedId:"example-input-event",id:"example-input-event",title:"Input Event",description:"Note",source:"@site/docs/example-input-event.mdx",sourceDirName:".",slug:"/example-input-event",permalink:"/docs/example-input-event",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-input-event.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-input-event",title:"Input Event",sidebar_label:"Input Event"},sidebar:"recipes",previous:{title:"Using findByText",permalink:"/docs/example-findByText"},next:{title:"React Context",permalink:"/docs/example-react-context"}},c={},s=[],v={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note")),(0,o.kt)("p",{parentName:"blockquote"},"If you want to simulate a more natural typing behaviour while testing your\ncomponent, consider the companion library ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/intro"},(0,o.kt)("inlineCode",{parentName:"a"},"user-event")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useState} from 'react'\nimport {screen, render, fireEvent} from '@testing-library/react'\n\nfunction CostInput() {\n  const [value, setValue] = useState('')\n\n  const removeDollarSign = value => (value[0] === '$' ? value.slice(1) : value)\n  const getReturnValue = value => (value === '' ? '' : `$${value}`)\n\n  const handleChange = ev => {\n    ev.preventDefault()\n    const inputtedValue = ev.currentTarget.value\n    const noDollarSign = removeDollarSign(inputtedValue)\n    if (isNaN(noDollarSign)) return\n    setValue(getReturnValue(noDollarSign))\n  }\n\n  return <input value={value} aria-label=\"cost-input\" onChange={handleChange} />\n}\n\nconst setup = () => {\n  const utils = render(<CostInput />)\n  const input = screen.getByLabelText('cost-input')\n  return {\n    input,\n    ...utils,\n  }\n}\n\ntest('It should keep a $ in front of the input', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '23'}})\n  expect(input.value).toBe('$23')\n})\ntest('It should allow a $ to be in the input when the value is changed', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '$23.0'}})\n  expect(input.value).toBe('$23.0')\n})\n\ntest('It should not allow letters to be inputted', () => {\n  const {input} = setup()\n  expect(input.value).toBe('') // empty before\n  fireEvent.change(input, {target: {value: 'Good Day'}})\n  expect(input.value).toBe('') //empty after\n})\n\ntest('It should allow the $ to be deleted', () => {\n  const {input} = setup()\n  fireEvent.change(input, {target: {value: '23'}})\n  expect(input.value).toBe('$23') // need to make a change so React registers \"\" as a change\n  fireEvent.change(input, {target: {value: ''}})\n  expect(input.value).toBe('')\n})\n")))}d.isMDXComponent=!0}}]);