"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[8154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"example-intro",title:"Example",sidebar_label:"Example"},c=void 0,l={unversionedId:"react-native-testing-library/example-intro",id:"react-native-testing-library/example-intro",title:"Example",description:"",source:"@site/docs/react-native-testing-library/example-intro.mdx",sourceDirName:"react-native-testing-library",slug:"/react-native-testing-library/example-intro",permalink:"/docs/react-native-testing-library/example-intro",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/react-native-testing-library/example-intro.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-intro",title:"Example",sidebar_label:"Example"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/react-native-testing-library/intro"},next:{title:"Setup",permalink:"/docs/react-native-testing-library/setup"}},p={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react'\nimport {Button, Text, TextInput, View} from 'react-native'\nimport {render, screen, fireEvent} from '@testing-library/react-native'\n\nfunction Example() {\n  const [name, setUser] = React.useState('')\n  const [show, setShow] = React.useState(false)\n\n  return (\n    <View>\n      <TextInput value={name} onChangeText={setUser} testID=\"input\" />\n      <Button\n        title=\"Print Username\"\n        onPress={() => {\n          // let's pretend this is making a server request, so it's async\n          // (you'd want to mock this imaginary request in your unit tests)...\n          setTimeout(() => {\n            setShow(true)\n          }, Math.floor(Math.random() * 200))\n        }}\n      />\n      {show && <Text testID=\"printed-username\">{name}</Text>}\n    </View>\n  )\n}\n\ntest('examples of some things', async () => {\n  const expectedUsername = 'Ada Lovelace'\n\n  render(<Example />)\n\n  fireEvent.changeText(screen.getByTestId('input'), expectedUsername)\n  fireEvent.press(screen.getByText('Print Username'))\n\n  // Using `findBy` query to wait for asynchronous operation to finish\n  const usernameOutput = await screen.findByTestId('printed-username')\n\n  // Using `toHaveTextContent` matcher from `@testing-library/jest-native` package.\n  expect(usernameOutput).toHaveTextContent(expectedUsername)\n\n  expect(screen.toJSON()).toMatchSnapshot()\n})\n")))}d.isMDXComponent=!0}}]);