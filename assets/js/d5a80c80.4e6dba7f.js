"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[43],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"api",title:"API"},p=void 0,d={unversionedId:"react-testing-library/api",id:"react-testing-library/api",title:"API",description:"React Testing Library re-exports everything from DOM Testing Library as well",source:"@site/docs/react-testing-library/api.mdx",sourceDirName:"react-testing-library",slug:"/react-testing-library/api",permalink:"/docs/react-testing-library/api",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/react-testing-library/api.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api",title:"API"},sidebar:"docs",previous:{title:"Setup",permalink:"/docs/react-testing-library/setup"},next:{title:"Migrate from Enzyme",permalink:"/docs/react-testing-library/migrate-from-enzyme"}},s={},c=[{value:"<code>render</code>",id:"render",level:2},{value:"<code>render</code> Options",id:"render-options",level:2},{value:"<code>container</code>",id:"container",level:3},{value:"<code>baseElement</code>",id:"baseelement",level:3},{value:"<code>hydrate</code>",id:"hydrate",level:3},{value:"<code>legacyRoot</code>",id:"legacyroot",level:3},{value:"<code>onCaughtError</code>",id:"oncaughterror",level:3},{value:"<code>onRecoverableError</code>",id:"onrecoverableerror",level:3},{value:"<code>wrapper</code>",id:"wrapper",level:3},{value:"<code>queries</code>",id:"queries",level:3},{value:"<code>render</code> Options <code>reactStrictMode</code>",id:"render-options-reactstrictmode",level:3},{value:"<code>render</code> Result",id:"render-result",level:2},{value:"<code>...queries</code>",id:"queries-1",level:3},{value:"<code>container</code>",id:"container-1",level:3},{value:"<code>baseElement</code>",id:"baseelement-1",level:3},{value:"<code>debug</code>",id:"debug",level:3},{value:"<code>rerender</code>",id:"rerender",level:3},{value:"<code>unmount</code>",id:"unmount",level:3},{value:"<code>asFragment</code>",id:"asfragment",level:3},{value:"<code>cleanup</code>",id:"cleanup",level:2},{value:"<code>act</code>",id:"act",level:2},{value:"<code>renderHook</code>",id:"renderhook",level:2},{value:"<code>renderHook</code> Options",id:"renderhook-options",level:2},{value:"<code>renderHook</code> Options <code>initialProps</code>",id:"renderhook-options-initialprops",level:3},{value:"<code>onCaughtError</code>",id:"oncaughterror-1",level:3},{value:"<code>onRecoverableError</code>",id:"onrecoverableerror-1",level:3},{value:"<code>renderHook</code> Options <code>wrapper</code>",id:"renderhook-options-wrapper",level:3},{value:"<code>renderHook</code> Options <code>reactStrictMode</code>",id:"renderhook-options-reactstrictmode",level:3},{value:"<code>renderHook</code> Result",id:"renderhook-result",level:2},{value:"<code>result</code>",id:"result",level:3},{value:"<code>rerender</code>",id:"rerender-1",level:3},{value:"<code>unmount</code>",id:"unmount-1",level:3},{value:"<code>configure</code>",id:"configure",level:2},{value:"<code>configure</code> Options",id:"configure-options",level:2},{value:"<code>reactStrictMode</code>",id:"reactstrictmode",level:3}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"React Testing Library")," re-exports everything from ",(0,o.kt)("inlineCode",{parentName:"p"},"DOM Testing Library")," as well\nas these methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render-options"},(0,o.kt)("inlineCode",{parentName:"a"},"render")," Options"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#container"},(0,o.kt)("inlineCode",{parentName:"a"},"container"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#hydrate"},(0,o.kt)("inlineCode",{parentName:"a"},"hydrate"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#legacyroot"},(0,o.kt)("inlineCode",{parentName:"a"},"legacyRoot"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#oncaughterror"},(0,o.kt)("inlineCode",{parentName:"a"},"onCaughtError"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#onrecoverableerror"},(0,o.kt)("inlineCode",{parentName:"a"},"onRecoverableError"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#wrapper"},(0,o.kt)("inlineCode",{parentName:"a"},"wrapper"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#queries"},(0,o.kt)("inlineCode",{parentName:"a"},"queries"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"a"},"reactStrictMode"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render-result"},(0,o.kt)("inlineCode",{parentName:"a"},"render")," Result"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#queries-1"},(0,o.kt)("inlineCode",{parentName:"a"},"...queries"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#container-1"},(0,o.kt)("inlineCode",{parentName:"a"},"container"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#baseelement-1"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#rerender"},(0,o.kt)("inlineCode",{parentName:"a"},"rerender"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#unmount"},(0,o.kt)("inlineCode",{parentName:"a"},"unmount"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#asfragment"},(0,o.kt)("inlineCode",{parentName:"a"},"asFragment"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cleanup"},(0,o.kt)("inlineCode",{parentName:"a"},"cleanup"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#act"},(0,o.kt)("inlineCode",{parentName:"a"},"act"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#renderhook"},(0,o.kt)("inlineCode",{parentName:"a"},"renderHook"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#renderhook-options"},(0,o.kt)("inlineCode",{parentName:"a"},"renderHook")," Options"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#initialprops"},(0,o.kt)("inlineCode",{parentName:"a"},"initialProps"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#oncaughterror"},(0,o.kt)("inlineCode",{parentName:"a"},"onCaughtError"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#onrecoverableerror"},(0,o.kt)("inlineCode",{parentName:"a"},"onRecoverableError"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#renderhook-options-wrapper"},(0,o.kt)("inlineCode",{parentName:"a"},"wrapper"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#renderhook-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"a"},"reactStrictMode"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#renderhook-result"},(0,o.kt)("inlineCode",{parentName:"a"},"renderHook")," Result"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#result"},(0,o.kt)("inlineCode",{parentName:"a"},"result"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#rerender-1"},(0,o.kt)("inlineCode",{parentName:"a"},"rerender"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#unmount-1"},(0,o.kt)("inlineCode",{parentName:"a"},"unmount"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configure"},(0,o.kt)("inlineCode",{parentName:"a"},"configure"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configure-options"},(0,o.kt)("inlineCode",{parentName:"a"},"configure")," Options"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"render"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function render(\n  ui: React.ReactElement<any>,\n  options?: {\n    /* You won't often use this, expand below for docs on options */\n  },\n): RenderResult\n")),(0,o.kt)("p",null,"Render into a container which is appended to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render} from '@testing-library/react'\n\nrender(<div />)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render} from '@testing-library/react'\nimport '@testing-library/jest-dom'\n\ntest('renders a message', () => {\n  const {asFragment, getByText} = render(<Greeting />)\n  expect(getByText('Hello, world!')).toBeInTheDocument()\n  expect(asFragment()).toMatchInlineSnapshot(`\n    <h1>Hello, World!</h1>\n  `)\n})\n")),(0,o.kt)("h2",{id:"render-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")," Options"),(0,o.kt)("p",null,"You won't often need to specify options, but if you ever do, here are the\navailable options which you could provide as a second argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),"."),(0,o.kt)("h3",{id:"container"},(0,o.kt)("inlineCode",{parentName:"h3"},"container")),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"React Testing Library")," will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"div")," and append that ",(0,o.kt)("inlineCode",{parentName:"p"},"div")," to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body")," and this is where your React component will be rendered. If\nyou provide your own HTMLElement ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," via this option, it will not be\nappended to the ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body")," automatically."),(0,o.kt)("p",null,"For example: If you are unit testing a ",(0,o.kt)("inlineCode",{parentName:"p"},"tablebody")," element, it cannot be a child\nof a ",(0,o.kt)("inlineCode",{parentName:"p"},"div"),". In this case, you can specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"table")," as the render ",(0,o.kt)("inlineCode",{parentName:"p"},"container"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const table = document.createElement('table')\n\nconst {container} = render(<TableBody {...props} />, {\n  container: document.body.appendChild(table),\n})\n")),(0,o.kt)("h3",{id:"baseelement"},(0,o.kt)("inlineCode",{parentName:"h3"},"baseElement")),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," is specified, then this defaults to that, otherwise this\ndefaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),". This is used as the base element for the queries as\nwell as what is printed when you use ",(0,o.kt)("inlineCode",{parentName:"p"},"debug()"),"."),(0,o.kt)("h3",{id:"hydrate"},(0,o.kt)("inlineCode",{parentName:"h3"},"hydrate")),(0,o.kt)("p",null,"If hydrate is set to true, then it will render with\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/hydrate#hydrate"},"ReactDOM.hydrate"),". This may be\nuseful if you are using server-side rendering and use ReactDOM.hydrate to mount\nyour components."),(0,o.kt)("h3",{id:"legacyroot"},(0,o.kt)("inlineCode",{parentName:"h3"},"legacyRoot")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"This option is only available when tests run with React 18 and earlier.")),(0,o.kt)("p",null,"By default we'll render with support for concurrent features (i.e.\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/client/createRoot"},(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOMClient.createRoot")),").\nHowever, if you're dealing with a legacy app that requires rendering like in\nReact 17 (i.e.\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/render"},(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOM.render")),") then you\nshould enable this option by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"legacyRoot: true"),"."),(0,o.kt)("h3",{id:"oncaughterror"},(0,o.kt)("inlineCode",{parentName:"h3"},"onCaughtError")),(0,o.kt)("p",null,"Callback called when React catches an error in an Error Boundary.\nBehaves the same as ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/client/createRoot#parameters"},(0,o.kt)("inlineCode",{parentName:"a"},"onCaughtError")," in ",(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOMClient.createRoot")),"."),(0,o.kt)("h3",{id:"onrecoverableerror"},(0,o.kt)("inlineCode",{parentName:"h3"},"onRecoverableError")),(0,o.kt)("p",null,"Callback called when React automatically recovers from errors.\nBehaves the same as ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/client/createRoot#parameters"},(0,o.kt)("inlineCode",{parentName:"a"},"onRecoverableError")," in ",(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOMClient.createRoot")),"."),(0,o.kt)("h3",{id:"wrapper"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapper")),(0,o.kt)("p",null,"Pass a React Component as the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapper")," option to have it rendered around the\ninner element. This is most useful for creating reusable custom render functions\nfor common data providers. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/react-testing-library/setup#custom-render"},"setup")," for examples."),(0,o.kt)("h3",{id:"queries"},(0,o.kt)("inlineCode",{parentName:"h3"},"queries")),(0,o.kt)("p",null,"Queries to bind. Overrides the default set from ",(0,o.kt)("inlineCode",{parentName:"p"},"DOM Testing Library")," unless\nmerged."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Example, a function to traverse table contents\nimport * as tableQueries from 'my-table-query-library'\nimport {queries} from '@testing-library/react'\n\nconst {getByRowColumn, getByText} = render(<MyTable />, {\n  queries: {...queries, ...tableQueries},\n})\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-custom-queries"},"helpers")," for guidance on using\nutility functions to create custom queries."),(0,o.kt)("p",null,"Custom queries can also be added globally by following the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/react-testing-library/setup#custom-render"},"custom render guide"),"."),(0,o.kt)("h3",{id:"render-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"render")," Options ",(0,o.kt)("inlineCode",{parentName:"h3"},"reactStrictMode")),(0,o.kt)("p",null,"When enabled, ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/StrictMode"},(0,o.kt)("inlineCode",{parentName:"a"},"<StrictMode>"))," is rendered around the inner element.\nIf defined, overrides the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"reactStrictMode")," set in ",(0,o.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/api/#configure-options"},(0,o.kt)("inlineCode",{parentName:"a"},"configure")),"."),(0,o.kt)("h2",{id:"render-result"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")," Result"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method returns an object that has a few properties:"),(0,o.kt)("h3",{id:"queries-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"...queries")),(0,o.kt)("p",null,"The most important feature of ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," is that the queries from\n",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"DOM Testing Library")," are automatically returned with their\nfirst argument bound to the ",(0,o.kt)("a",{parentName:"p",href:"#baseelement"},"baseElement"),", which defaults to\n",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"Queries")," for a complete list."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const {getByLabelText, queryAllByTestId} = render(<Component />)\n")),(0,o.kt)("h3",{id:"container-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"container")),(0,o.kt)("p",null,"The containing DOM node of your rendered React Element (rendered using\n",(0,o.kt)("inlineCode",{parentName:"p"},"ReactDOM.render"),"). It's a ",(0,o.kt)("inlineCode",{parentName:"p"},"div"),". This is a regular DOM node, so you can call\n",(0,o.kt)("inlineCode",{parentName:"p"},"container.querySelector")," etc. to inspect the children."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Tip: To get the root element of your rendered element, use\n",(0,o.kt)("inlineCode",{parentName:"p"},"container.firstChild"),"."),(0,o.kt)("p",{parentName:"blockquote"},"NOTE: When that root element is a\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/Fragment"},"React Fragment"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"container.firstChild")," will only get the first child of that Fragment, not the\nFragment itself.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udea8 If you find yourself using ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," to query for rendered elements then\nyou should reconsider! The other queries are designed to be more resilient to\nchanges that will be made to the component you're testing. Avoid using\n",(0,o.kt)("inlineCode",{parentName:"p"},"container")," to query for elements!")),(0,o.kt)("h3",{id:"baseelement-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"baseElement")),(0,o.kt)("p",null,"The containing DOM node where your React Element is rendered in the container.\nIf you don't specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," in the options of ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),", it will\ndefault to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("p",null,"This is useful when the component you want to test renders something outside the\ncontainer div, e.g. when you want to snapshot test your portal component which\nrenders its HTML directly in the body."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: the queries returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," looks into baseElement, so you can\nuse queries to test your portal component without the baseElement.")),(0,o.kt)("h3",{id:"debug"},(0,o.kt)("inlineCode",{parentName:"h3"},"debug")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: It's recommended to use ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about#screendebug"},(0,o.kt)("inlineCode",{parentName:"a"},"screen.debug")),"\ninstead.")),(0,o.kt)("p",null,"This method is a shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log(prettyDOM(baseElement))"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render} from '@testing-library/react'\n\nconst HelloWorld = () => <h1>Hello World</h1>\nconst {debug} = render(<HelloWorld />)\ndebug()\n// <div>\n//   <h1>Hello World</h1>\n// </div>\n// you can also pass an element: debug(getByTestId('messages'))\n// and you can pass all the same arguments to debug as you can\n// to prettyDOM:\n// const maxLengthToPrint = 10000\n// debug(getByTestId('messages'), maxLengthToPrint, {highlight: false})\n")),(0,o.kt)("p",null,"This is a simple wrapper around ",(0,o.kt)("inlineCode",{parentName:"p"},"prettyDOM")," which is also exposed and comes from\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-debugging#prettydom"},(0,o.kt)("inlineCode",{parentName:"a"},"DOM Testing Library")),"."),(0,o.kt)("h3",{id:"rerender"},(0,o.kt)("inlineCode",{parentName:"h3"},"rerender")),(0,o.kt)("p",null,"It'd probably be better if you test the component that's doing the prop updating\nto ensure that the props are being updated correctly (see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guiding-principles"},"the Guiding Principles section"),"). That said, if you'd\nprefer to update the props of a rendered component in your test, this function\ncan be used to update props of the rendered component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render} from '@testing-library/react'\n\nconst {rerender} = render(<NumberDisplay number={1} />)\n\n// re-render the same component with different props\nrerender(<NumberDisplay number={2} />)\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/example-update-props"},"See the examples page")),(0,o.kt)("h3",{id:"unmount"},(0,o.kt)("inlineCode",{parentName:"h3"},"unmount")),(0,o.kt)("p",null,"This will cause the rendered component to be unmounted. This is useful for\ntesting what happens when your component is removed from the page (like testing\nthat you don't leave event handlers hanging around causing memory leaks)."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This method is a pretty small abstraction over\n",(0,o.kt)("inlineCode",{parentName:"p"},"ReactDOM.unmountComponentAtNode"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render} from '@testing-library/react'\n\nconst {container, unmount} = render(<Login />)\nunmount()\n// your component has been unmounted and now: container.innerHTML === ''\n")),(0,o.kt)("h3",{id:"asfragment"},(0,o.kt)("inlineCode",{parentName:"h3"},"asFragment")),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentFragment")," of your rendered component. This can be useful if\nyou need to avoid live bindings and see how your component reacts to events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useState} from 'react'\nimport {render, fireEvent} from '@testing-library/react'\n\nconst TestComponent = () => {\n  const [count, setCounter] = useState(0)\n\n  return (\n    <button onClick={() => setCounter(count => count + 1)}>\n      Click to increase: {count}\n    </button>\n  )\n}\n\nconst {getByText, asFragment} = render(<TestComponent />)\nconst firstRender = asFragment()\n\nfireEvent.click(getByText(/Click to increase/))\n\n// This will snapshot only the difference between the first render, and the\n// state of the DOM after the click event.\n// See https://github.com/jest-community/snapshot-diff\nexpect(firstRender).toMatchDiffSnapshot(asFragment())\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"cleanup"},(0,o.kt)("inlineCode",{parentName:"h2"},"cleanup")),(0,o.kt)("p",null,"Unmounts React trees that were mounted with ",(0,o.kt)("a",{parentName:"p",href:"#render"},"render"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is called automatically if your testing framework (such as mocha, Jest or\nJasmine) injects a global ",(0,o.kt)("inlineCode",{parentName:"p"},"afterEach()")," function into the testing environment.\nIf not, you will need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanup()")," after each test.")),(0,o.kt)("p",null,"For example, if you're using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/avajs/ava"},"ava")," testing\nframework, then you would need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"test.afterEach")," hook like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {cleanup, render} from '@testing-library/react'\nimport test from 'ava'\n\ntest.afterEach(cleanup)\n\ntest('renders into document', () => {\n  render(<div />)\n  // ...\n})\n\n// ... more tests ...\n")),(0,o.kt)("p",null,"Failing to call ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanup")," when you've called ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),' could result in a memory\nleak and tests which are not "idempotent" (which can lead to difficult to debug\nerrors in your tests).'),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"act"},(0,o.kt)("inlineCode",{parentName:"h2"},"act")),(0,o.kt)("p",null,"This is a light wrapper around the\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/act"},(0,o.kt)("inlineCode",{parentName:"a"},"react")," ",(0,o.kt)("inlineCode",{parentName:"a"},"act")," function"),".\nAll it does is forward all arguments to the act function if your version of\nreact supports ",(0,o.kt)("inlineCode",{parentName:"p"},"act"),". It is recommended to use the import from\n",(0,o.kt)("inlineCode",{parentName:"p"},"@testing-library/react")," over ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," for consistency reasons."),(0,o.kt)("h2",{id:"renderhook"},(0,o.kt)("inlineCode",{parentName:"h2"},"renderHook")),(0,o.kt)("p",null,"This is a convenience wrapper around ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," with a custom test component. The\nAPI emerged from a popular testing pattern and is mostly interesting for\nlibraries publishing hooks. You should prefer ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," since a custom test\ncomponent results in more readable and robust tests since the thing you want to\ntest is not hidden behind an abstraction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function renderHook<\n  Result,\n  Props,\n  Q extends Queries = typeof queries,\n  Container extends Element | DocumentFragment = HTMLElement,\n  BaseElement extends Element | DocumentFragment = Container\n>(\n  render: (initialProps: Props) => Result,\n  options?: RenderHookOptions<Props, Q, Container, BaseElement>,\n): RenderHookResult<Result, Props>\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {renderHook} from '@testing-library/react'\n\ntest('returns logged in user', () => {\n  const {result} = renderHook(() => useLoggedInUser())\n  expect(result.current).toEqual({name: 'Alice'})\n})\n")),(0,o.kt)("h2",{id:"renderhook-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"renderHook")," Options"),(0,o.kt)("h3",{id:"renderhook-options-initialprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"renderHook")," Options ",(0,o.kt)("inlineCode",{parentName:"h3"},"initialProps")),(0,o.kt)("p",null,"Declares the props that are passed to the render-callback when first invoked.\nThese will ",(0,o.kt)("strong",{parentName:"p"},"not")," be passed if you call ",(0,o.kt)("inlineCode",{parentName:"p"},"rerender")," without props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {renderHook} from '@testing-library/react'\n\ntest('returns logged in user', () => {\n  const {result, rerender} = renderHook((props = {}) => props, {\n    initialProps: {name: 'Alice'},\n  })\n  expect(result.current).toEqual({name: 'Alice'})\n  rerender()\n  expect(result.current).toEqual({name: undefined})\n})\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: When using ",(0,o.kt)("inlineCode",{parentName:"p"},"renderHook")," in conjunction with the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapper")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"initialProps")," options, the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialProps")," are not passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapper"),"\ncomponent. To provide props to the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapper")," component, consider a solution\nlike this:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const createWrapper = (Wrapper, props) => {\n  return function CreatedWrapper({ children }) {\n    return <Wrapper {...props}>{children}</Wrapper>;\n  };\n};\n\n...\n\n{\n  wrapper: createWrapper(Wrapper, { value: 'foo' }),\n}\n"))),(0,o.kt)("h3",{id:"oncaughterror-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"onCaughtError")),(0,o.kt)("p",null,"Callback called when React catches an error in an Error Boundary.\nBehaves the same as ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/client/createRoot#parameters"},(0,o.kt)("inlineCode",{parentName:"a"},"onCaughtError")," in ",(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOMClient.createRoot")),"."),(0,o.kt)("h3",{id:"onrecoverableerror-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"onRecoverableError")),(0,o.kt)("p",null,"Callback called when React automatically recovers from errors.\nBehaves the same as ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/client/createRoot#parameters"},(0,o.kt)("inlineCode",{parentName:"a"},"onRecoverableError")," in ",(0,o.kt)("inlineCode",{parentName:"a"},"ReactDOMClient.createRoot")),"."),(0,o.kt)("h3",{id:"renderhook-options-wrapper"},(0,o.kt)("inlineCode",{parentName:"h3"},"renderHook")," Options ",(0,o.kt)("inlineCode",{parentName:"h3"},"wrapper")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"#wrapper"},(0,o.kt)("inlineCode",{parentName:"a"},"wrapper")," option for ",(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("h3",{id:"renderhook-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"renderHook")," Options ",(0,o.kt)("inlineCode",{parentName:"h3"},"reactStrictMode")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"#render-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"a"},"reactStrictMode")," option for ",(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("h2",{id:"renderhook-result"},(0,o.kt)("inlineCode",{parentName:"h2"},"renderHook")," Result"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"renderHook")," method returns an object that has a few properties:"),(0,o.kt)("h3",{id:"result"},(0,o.kt)("inlineCode",{parentName:"h3"},"result")),(0,o.kt)("p",null,"Holds the value of the most recently ",(0,o.kt)("strong",{parentName:"p"},"committed")," return value of the\nrender-callback:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {renderHook} from '@testing-library/react'\n\nconst {result} = renderHook(() => {\n  const [name, setName] = useState('')\n  React.useEffect(() => {\n    setName('Alice')\n  }, [])\n\n  return name\n})\n\nexpect(result.current).toBe('Alice')\n")),(0,o.kt)("p",null,"Note that the value is held in ",(0,o.kt)("inlineCode",{parentName:"p"},"result.current"),". Think of ",(0,o.kt)("inlineCode",{parentName:"p"},"result")," as a\n",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/learn/referencing-values-with-refs"},"ref")," for the most recently\n",(0,o.kt)("strong",{parentName:"p"},"committed")," value."),(0,o.kt)("h3",{id:"rerender-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"rerender")),(0,o.kt)("p",null,"Renders the previously rendered render-callback with the new props:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {renderHook} from '@testing-library/react'\n\nconst {rerender} = renderHook(({name = 'Alice'} = {}) => name)\n\n// re-render the same hook with different props\nrerender({name: 'Bob'})\n")),(0,o.kt)("h3",{id:"unmount-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"unmount")),(0,o.kt)("p",null,"Unmounts the test hook."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {renderHook} from '@testing-library/react'\n\nconst {unmount} = renderHook(({name = 'Alice'} = {}) => name)\n\nunmount()\n")),(0,o.kt)("h2",{id:"configure"},(0,o.kt)("inlineCode",{parentName:"h2"},"configure")),(0,o.kt)("p",null,"Changes global options. Basic usage can be seen at\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-configuration"},"Configuration Options"),"."),(0,o.kt)("p",null,"React Testing Library also has dedicated options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {configure} from '@testing-library/react'\n\nconfigure({reactStrictMode: true})\n")),(0,o.kt)("h2",{id:"configure-options"},(0,o.kt)("inlineCode",{parentName:"h2"},"configure")," Options"),(0,o.kt)("h3",{id:"reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"reactStrictMode")),(0,o.kt)("p",null,"When enabled, ",(0,o.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/StrictMode"},(0,o.kt)("inlineCode",{parentName:"a"},"<StrictMode>"))," is\nrendered around the inner element. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"This setting can be changed for a single test by providing ",(0,o.kt)("inlineCode",{parentName:"p"},"reactStrictMode")," in the options argument of the ",(0,o.kt)("a",{parentName:"p",href:"#render-options-reactstrictmode"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))," function."))}m.isMDXComponent=!0}}]);