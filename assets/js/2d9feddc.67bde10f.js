"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[9172],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,y=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},204:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),s=["components"],o={id:"example-findByText",title:"Using findByText"},l=void 0,d={unversionedId:"example-findByText",id:"example-findByText",title:"Using findByText",description:"",source:"@site/docs/example-findByText.md",sourceDirName:".",slug:"/example-findByText",permalink:"/docs/example-findByText",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-findByText.md",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-findByText",title:"Using findByText"},sidebar:"recipes",previous:{title:"External Examples",permalink:"/docs/example-external"},next:{title:"Input Event",permalink:"/docs/example-input-event"}},p={},c=[],u={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// src/__tests__/example.test.js\n// This is an example of how to use findByText to query for text that\n// is not visible right away\n\nimport {screen} from '@testing-library/dom'\nimport userEvent from '@testing-library/user-event'\n// provides a set of custom jest matchers that you can use to extend jest\n// i.e. `.toBeVisible`\nimport '@testing-library/jest-dom'\n\nfunction renderApp() {\n  const el = document.body.appendChild(document.createElement('div'))\n  el.innerHTML = `\n    <form id='login_form' method='post' name='login'>\n      <label for='username'>User Name:</label>\n\n      <input\n        type='text'\n        name='username'\n        id='username_input'\n        placeholder='Enter user name'\n      />\n\n      <span id='username_required_error' style='color: red; display: none;'>\n        User Name Required\n      </span>\n\n      <span id='invalid_username_error' style='color: red; display: none;'>\n        Invalid User Name\n      </span>\n\n      <label for='password'>Password:</label>\n\n      <input\n        type='password'\n        name='password'\n        id='password_input'\n        placeholder='Enter password'\n      />\n\n      <span id='invalid_password_error' style='color: red; display: none;'>\n        Invalid Password\n      </span>\n\n      <span id='password_required_error' style='color: red; display: none;'>\n        Password Required\n      </span>\n\n      <button id='submit' type='submit'>\n        Login\n      </button>\n    </form>\n  `\n\n  const submitButton = el.querySelector('#submit')\n  const formEl = el.querySelector('#login_form')\n\n  submitButton.addEventListener('click', () => {\n    const userInput = el.querySelector('#username_input')\n    const passwordInput = el.querySelector('#password_input')\n\n    const userName = userInput.value\n    const password = passwordInput.value\n    if (!userName) {\n      el.querySelector('#username_required_error').style.display = 'inline'\n    }\n\n    if (!password) {\n      el.querySelector('#password_required_error').style.display = 'inline'\n    }\n\n    if (userName && userName !== 'Bob') {\n      el.querySelector('#invalid_username_error').style.display = 'inline'\n    }\n\n    if (password && password !== 'theBuilder') {\n      el.querySelector('#invalid_password_error').style.display = 'inline'\n    }\n  })\n\n  formEl.addEventListener('submit', function (evt) {\n    evt.preventDefault()\n    window.history.back()\n  })\n\n  return {user: userEvent.setup()}\n}\n\nafterEach(() => (document.body.innerHTML = ``))\n\ndescribe('findByText Examples', () => {\n  it('should show a required field warning for each empty input field', async () => {\n    const {user} = renderApp()\n    await user.click(\n      screen.getByRole('button', {\n        name: 'Login',\n      }),\n    )\n\n    expect(await screen.findByText('User Name Required')).toBeVisible()\n\n    expect(await screen.findByText('Password Required')).toBeVisible()\n  })\n\n  it('should show invalid field errors for each invalid input field', async () => {\n    const {user} = renderApp()\n    const userNameField = screen.getByPlaceholderText('Enter user name')\n    const passwordField = screen.getByPlaceholderText('Enter password')\n\n    expect(await screen.findByText('Invalid Password')).not.toBeVisible()\n    expect(await screen.findByText('Invalid User Name')).not.toBeVisible()\n\n    await user.type(userNameField, 'Philchard')\n    await user.type(passwordField, 'theCat')\n\n    expect(userNameField).toHaveValue('Philchard')\n    expect(passwordField).toHaveValue('theCat')\n\n    await user.click(\n      screen.getByRole('button', {\n        name: 'Login',\n      }),\n    )\n\n    expect(await screen.findByText('Invalid User Name')).toBeVisible()\n    expect(await screen.findByText('Invalid Password')).toBeVisible()\n  })\n})\n")))}m.isMDXComponent=!0}}]);