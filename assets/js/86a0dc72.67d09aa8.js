"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6322],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>p,toc:()=>u});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={id:"example-react-hooks-useReducer",title:"useReducer"},s=void 0,p={unversionedId:"example-react-hooks-useReducer",id:"example-react-hooks-useReducer",title:"useReducer",description:"Basic example showing how to test the useReducer hook. The most important",source:"@site/docs/example-react-hooks-useReducer.mdx",sourceDirName:".",slug:"/example-react-hooks-useReducer",permalink:"/docs/example-react-hooks-useReducer",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-react-hooks-useReducer.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-react-hooks-useReducer",title:"useReducer"},sidebar:"recipes",previous:{title:"React Context",permalink:"/docs/example-react-context"},next:{title:"Formik",permalink:"/docs/example-react-formik"}},l={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Basic example showing how to test the ",(0,a.kt)("inlineCode",{parentName:"p"},"useReducer")," hook. The most important\nthing is that we aren't testing the reducer directly - it's an implementation\ndetail of the component! Instead we are testing the component interface."),(0,a.kt)("p",null,"The component we are testing changes some text depending on an ",(0,a.kt)("inlineCode",{parentName:"p"},"isConfirmed"),"\nstate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// example.js\n\nimport React, {useReducer} from 'react'\n\nconst initialState = {\n  isConfirmed: false,\n}\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SUCCESS':\n      return {\n        ...state,\n        isConfirmed: true,\n      }\n    default:\n      throw Error('unknown action')\n  }\n}\n\nconst Example = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <div>\n      <div>\n        {state.isConfirmed ? (\n          <p>Confirmed!</p>\n        ) : (\n          <p>Waiting for confirmation...</p>\n        )}\n      </div>\n      <button onClick={() => dispatch({type: 'SUCCESS'})}>Confirm</button>\n    </div>\n  )\n}\n\nexport default Example\n")),(0,a.kt)("p",null,"We are testing to see if we get the correct output in our JSX based on the\nreducer state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// example.test.js\n\nimport React from 'react'\nimport {render, fireEvent} from '@testing-library/react'\nimport Example from './example.js'\n\nit('shows success message after confirm button is clicked', () => {\n  const {getByText} = render(<Example />)\n\n  expect(getByText(/waiting/i)).toBeInTheDocument()\n\n  fireEvent.click(getByText('Confirm'))\n\n  expect(getByText('Confirmed!')).toBeInTheDocument()\n})\n")))}d.isMDXComponent=!0}}]);