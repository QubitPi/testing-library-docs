"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"example-intro",title:"Example",sidebar_label:"Example"},l=void 0,c={unversionedId:"dom-testing-library/example-intro",id:"dom-testing-library/example-intro",title:"Example",description:"",source:"@site/docs/dom-testing-library/example-intro.mdx",sourceDirName:"dom-testing-library",slug:"/dom-testing-library/example-intro",permalink:"/docs/dom-testing-library/example-intro",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/dom-testing-library/example-intro.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-intro",title:"Example",sidebar_label:"Example"},sidebar:"docs",previous:{title:"Install",permalink:"/docs/dom-testing-library/install"},next:{title:"Setup",permalink:"/docs/dom-testing-library/setup"}},p={},m=[],u={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/__tests__/example.js"',title:'"src/__tests__/example.js"'},"// query utilities:\nimport {\n  getByLabelText,\n  getByText,\n  getByTestId,\n  queryByTestId,\n  // Tip: all queries are also exposed on an object\n  // called \"queries\" which you could import here as well\n  waitFor,\n} from '@testing-library/dom'\n// adds special assertions like toHaveTextContent\nimport '@testing-library/jest-dom'\n\nfunction getExampleDOM() {\n  // This is just a raw example of setting up some DOM\n  // that we can interact with. Swap this with your UI\n  // framework of choice \ud83d\ude09\n  const div = document.createElement('div')\n  div.innerHTML = `\n    <label for=\"username\">Username</label>\n    <input id=\"username\" />\n    <button>Print Username</button>\n  `\n  const button = div.querySelector('button')\n  const input = div.querySelector('input')\n  button.addEventListener('click', () => {\n    // let's pretend this is making a server request, so it's async\n    // (you'd want to mock this imaginary request in your unit tests)...\n    setTimeout(() => {\n      const printedUsernameContainer = document.createElement('div')\n      printedUsernameContainer.innerHTML = `\n        <div data-testid=\"printed-username\">${input.value}</div>\n      `\n      div.appendChild(printedUsernameContainer)\n    }, Math.floor(Math.random() * 200))\n  })\n  return div\n}\n\ntest('examples of some things', async () => {\n  const famousProgrammerInHistory = 'Ada Lovelace'\n  const container = getExampleDOM()\n\n  // Get form elements by their label text.\n  // An error will be thrown if one cannot be found (accessibility FTW!)\n  const input = getByLabelText(container, 'Username')\n  input.value = famousProgrammerInHistory\n\n  // Get elements by their text, just like a real user does.\n  getByText(container, 'Print Username').click()\n\n  await waitFor(() =>\n    expect(queryByTestId(container, 'printed-username')).toBeTruthy(),\n  )\n\n  // getByTestId and queryByTestId are an escape hatch to get elements\n  // by a test id (could also attempt to get this element by its text)\n  expect(getByTestId(container, 'printed-username')).toHaveTextContent(\n    famousProgrammerInHistory,\n  )\n  // jest snapshots work great with regular DOM nodes!\n  expect(container).toMatchSnapshot()\n})\n")))}d.isMDXComponent=!0}}]);