"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?l.createElement(f,i(i({ref:t},c),{},{components:n})):l.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var p=2;p<o;p++)i[p]=n[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var l=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],r={id:"utility",title:"Utility APIs"},s=void 0,p={unversionedId:"user-event/utility",id:"user-event/utility",title:"Utility APIs",description:"The following APIs don't have one-to-one equivalents in a real user",source:"@site/docs/user-event/api-utility.mdx",sourceDirName:"user-event",slug:"/user-event/utility",permalink:"/docs/user-event/utility",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/user-event/api-utility.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"utility",title:"Utility APIs"},sidebar:"docs",previous:{title:"Clipboard",permalink:"/docs/user-event/clipboard"},next:{title:"Convenience APIs",permalink:"/docs/user-event/convenience"}},c={},u=[{value:"clear()",id:"clear",level:2},{value:'<a name="selectoptions"/><a name="deselectoptions"/> selectOptions(), deselectOptions()',id:"-selectoptions-deselectoptions",level:2},{value:"type()",id:"type",level:2},{value:"upload()",id:"upload",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The following APIs don't have one-to-one equivalents in a real user\ninteraction.",(0,o.kt)("br",{parentName:"p"}),"\n",'Their behavior is therefore an interpretation how the "perceived" user\ninteraction might be translated to actual events on the DOM.'),(0,o.kt)("h2",{id:"clear"},"clear()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"clear(element: Element): Promise<void>\n")),(0,o.kt)("p",null,"This API can be used to easily clear an editable element."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Focus element"),(0,o.kt)("li",{parentName:"ol"},"Select all contents as per browser menu"),(0,o.kt)("li",{parentName:"ol"},"Delete contents as per browser menu")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('clear', async () => {\n  const user = userEvent.setup()\n\n  render(<textarea defaultValue=\"Hello, World!\" />)\n\n  await user.clear(screen.getByRole('textbox'))\n\n  expect(screen.getByRole('textbox')).toHaveValue('')\n})\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," is rejected if the element can not be focused or contents can not\nbe selected."),(0,o.kt)("h2",{id:"-selectoptions-deselectoptions"},(0,o.kt)("a",{name:"selectoptions"}),(0,o.kt)("a",{name:"deselectoptions"})," selectOptions(), deselectOptions()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"selectOptions(\n  element: Element,\n  values: HTMLElement | HTMLElement[] | string[] | string,\n): Promise<void>\ndeselectOptions(\n  element: Element,\n  values: HTMLElement | HTMLElement[] | string[] | string,\n): Promise<void>\n")),(0,o.kt)("p",null,"Select/deselect the given options in an\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement"},"HTMLSelectElement"),"\nor\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role"},"listbox"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"values")," parameter can refer to an option per its value, HTML content or\njust provide the element. It also accepts an array of these."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Selecting multiple options and/or deselecting options of ",(0,o.kt)("inlineCode",{parentName:"p"},"HTMLSelectElement"),"\nis only possible if\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple"},"multiple"),"\nis specified.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('selectOptions', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  await user.selectOptions(screen.getByRole('listbox'), ['1', 'C'])\n\n  expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)\n  expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)\n  expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('deselectOptions', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\" selected>\n        B\n      </option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  await user.deselectOptions(screen.getByRole('listbox'), '2')\n\n  expect(screen.getByText('B').selected).toBe(false)\n})\n")),(0,o.kt)("p",null,"Note that this API triggers pointer events and is therefore subject to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/options#pointereventscheck"},"pointerEventsCheck"),"."),(0,o.kt)("h2",{id:"type"},"type()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type(\n  element: Element,\n  text: KeyboardInput,\n  options?: {\n    skipClick?: boolean\n    skipAutoClose?: boolean\n    initialSelectionStart?: number\n    initialSelectionEnd?: number\n  }\n): Promise<void>\n")),(0,o.kt)("p",null,"Type into an input element."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You should use ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/keyboard"},(0,o.kt)("inlineCode",{parentName:"a"},"keyboard()"))," if you want to just simulate\npressing buttons on the keyboard.",(0,o.kt)("br",{parentName:"p"}),"\n","You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"type()")," if you just want to conveniently insert some text into an\ninput field or textarea.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Unless ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-event/options#skipclick"},(0,o.kt)("inlineCode",{parentName:"a"},"skipClick"))," is ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),", click the element."),(0,o.kt)("li",{parentName:"ol"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"initialSelectionStart")," is set, set the selection on the element. If\n",(0,o.kt)("inlineCode",{parentName:"li"},"initialSelectionEnd")," is not set, this results in a collapsed selection."),(0,o.kt)("li",{parentName:"ol"},"Type the given ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," per ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-event/keyboard"},(0,o.kt)("inlineCode",{parentName:"a"},"keyboard()")),"."),(0,o.kt)("li",{parentName:"ol"},"Unless ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-event/options#skipautoclose"},(0,o.kt)("inlineCode",{parentName:"a"},"skipAutoClose"))," is ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),", release all\npressed keys.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('type into an input field', async () => {\n  const user = userEvent.setup()\n\n  render(<input defaultValue=\"Hello,\" />)\n  const input = screen.getByRole('textbox')\n\n  await user.type(input, ' World!')\n\n  expect(input).toHaveValue('Hello, World!')\n})\n")),(0,o.kt)("h2",{id:"upload"},"upload()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"upload(\n  element: HTMLElement,\n  fileOrFiles: File | File[],\n): Promise<void>\n")),(0,o.kt)("p",null,"Change a file input as if a user clicked it and selected files in the resulting\nfile upload dialog."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Files that don't match an ",(0,o.kt)("inlineCode",{parentName:"p"},"accept")," property will be automatically discarded,\nunless ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/options#applyaccept"},(0,o.kt)("inlineCode",{parentName:"a"},"applyAccept"))," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('upload file', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" />\n    </div>,\n  )\n  const file = new File(['hello'], 'hello.png', {type: 'image/png'})\n  const input = screen.getByLabelText(/upload file/i)\n\n  await user.upload(input, file)\n\n  expect(input.files[0]).toBe(file)\n  expect(input.files.item(0)).toBe(file)\n  expect(input.files).toHaveLength(1)\n})\n\ntest('upload multiple files', async () => {\n  const user = userEvent.setup()\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" multiple />\n    </div>,\n  )\n  const files = [\n    new File(['hello'], 'hello.png', {type: 'image/png'}),\n    new File(['there'], 'there.png', {type: 'image/png'}),\n  ]\n  const input = screen.getByLabelText(/upload file/i)\n\n  await user.upload(input, files)\n\n  expect(input.files).toHaveLength(2)\n  expect(input.files[0]).toBe(files[0])\n  expect(input.files[1]).toBe(files[1])\n})\n")))}m.isMDXComponent=!0}}]);