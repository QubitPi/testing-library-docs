"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6363],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),i=n(6010),l=n(2389),o=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var t,n,l=e.lazy,p=e.block,m=e.defaultValue,y=e.values,b=e.groupId,f=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=y?y:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),h=(0,o.l)(g,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(t=null!=m?m:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:v[0].props.value;if(null!==k&&!g.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,s.U)(),N=T.tabGroupChoices,I=T.setTabGroupChoices,w=(0,a.useState)(k),O=w[0],x=w[1],E=[],q=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var C=N[b];null!=C&&C!==O&&g.some((function(e){return e.value===C}))&&x(C)}var B=function(e){var t=e.currentTarget,n=E.indexOf(t),r=g[n].value;r!==O&&(q(t),x(r),null!=b&&I(b,String(r)))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,a=E.indexOf(e.currentTarget)+1;n=null!=(r=E[a])?r:E[0];break;case"ArrowLeft":var i,l=E.indexOf(e.currentTarget)-1;n=null!=(i=E[l])?i:E[E.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":p},f)},g.map((function(e){var t=e.value,n=e.label,l=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return E.push(e)},onKeyDown:j,onFocus:B,onClick:B},l,{className:(0,i.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),l?(0,a.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function m(e){var t=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(t)},e))}},5670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>b,frontMatter:()=>u,metadata:()=>d,toc:()=>m});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=n(5488),o=n(5162),s=["components"],u={id:"bytestid",title:"ByTestId"},c=void 0,d={unversionedId:"queries/bytestid",id:"queries/bytestid",title:"ByTestId",description:"getByTestId, queryByTestId, getAllByTestId, queryAllByTestId, findByTestId,",source:"@site/docs/queries/bytestid.mdx",sourceDirName:"queries",slug:"/queries/bytestid",permalink:"/docs/queries/bytestid",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/queries/bytestid.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"bytestid",title:"ByTestId"},sidebar:"docs",previous:{title:"ByTitle",permalink:"/docs/queries/bytitle"},next:{title:"Firing Events",permalink:"/docs/dom-testing-library/api-events"}},p={},m=[{value:"API",id:"api",level:2},{value:"Options",id:"options",level:2},{value:"Overriding <code>data-testid</code>",id:"overriding-data-testid",level:2}],y={toc:m};function b(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"getByTestId, queryByTestId, getAllByTestId, queryAllByTestId, findByTestId,\nfindAllByTestId")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getByTestId(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n")),(0,i.kt)("p",null,"A shortcut to ",(0,i.kt)("inlineCode",{parentName:"p"},'container.querySelector(`[data-testid="${yourId}"]`)')," (and it\nalso accepts a ",(0,i.kt)("a",{parentName:"p",href:"/docs/queries/about#textmatch"},(0,i.kt)("inlineCode",{parentName:"a"},"TextMatch")),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div data-testid="custom-element" />\n')),(0,i.kt)(l.Z,{defaultValue:"native",values:[{label:"Native",value:"native"},{label:"React",value:"react"},{label:"Angular",value:"angular"},{label:"Cypress",value:"cypress"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"native",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {screen} from '@testing-library/dom'\n\nconst element = screen.getByTestId('custom-element')\n"))),(0,i.kt)(o.Z,{value:"react",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render, screen} from '@testing-library/react'\n\nrender(<MyComponent />)\nconst element = screen.getByTestId('custom-element')\n"))),(0,i.kt)(o.Z,{value:"angular",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {render, screen} from '@testing-library/angular'\n\nawait render(MyComponent)\nconst element = screen.getByTestId('custom-element')\n"))),(0,i.kt)(o.Z,{value:"cypress",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cy.findByTestId('custom-element').should('exist')\n")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In the spirit of ",(0,i.kt)("a",{parentName:"p",href:"/docs/guiding-principles"},"the guiding principles"),", it is\nrecommended to use this only after the other queries don't work for your use\ncase. Using data-testid attributes do not resemble how your software is used\nand should be avoided if possible. That said, they are ",(0,i.kt)("em",{parentName:"p"},"way")," better than\nquerying based on DOM structure or styling css class names. Learn more about\n",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid"),"s from the blog post\n",(0,i.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change"},'"Making your UI tests resilient to change"'))),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/queries/about#textmatch"},"TextMatch")," options"),(0,i.kt)("h2",{id:"overriding-data-testid"},"Overriding ",(0,i.kt)("inlineCode",{parentName:"h2"},"data-testid")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"...ByTestId")," functions in ",(0,i.kt)("inlineCode",{parentName:"p"},"DOM Testing Library")," use the attribute\n",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," by default, following the precedent set by\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/testing-library/react-testing-library/issues/1"},"React Native Web"),"\nwhich uses a ",(0,i.kt)("inlineCode",{parentName:"p"},"testID")," prop to emit a ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute on the element, and\nwe recommend you adopt that attribute where possible. But if you already have an\nexisting codebase that uses a different attribute for this purpose, you can\noverride this value via\n",(0,i.kt)("inlineCode",{parentName:"p"},"configure({testIdAttribute: 'data-my-test-attribute'})"),"."))}b.isMDXComponent=!0}}]);