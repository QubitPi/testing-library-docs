"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[2900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7624:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={id:"faq",title:"FAQ"},l=void 0,p={unversionedId:"angular-testing-library/faq",id:"angular-testing-library/faq",title:"FAQ",description:"See also the main FAQ for questions not specific",source:"@site/docs/angular-testing-library/faq.mdx",sourceDirName:"angular-testing-library",slug:"/angular-testing-library/faq",permalink:"/docs/angular-testing-library/faq",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/angular-testing-library/faq.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"faq",title:"FAQ"},sidebar:"docs",previous:{title:"Version compatibility",permalink:"/docs/angular-testing-library/version-compatibility"},next:{title:"Introduction",permalink:"/docs/svelte-testing-library/intro"}},c={},u=[],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"See also the ",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/faq"},"main FAQ")," for questions not specific\nto Angular testing."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Can I write unit tests with this library?"),(0,i.kt)("p",null,"Definitely yes! You can write unit and integration tests with this library. See\nbelow for more on how to mock dependencies (because this library intentionally\ndoes NOT support shallow rendering) if you want to unit test a high level\ncomponent. The tests in this project show several examples of unit testing with\nthis library."),(0,i.kt)("p",null,"As you write your tests, keep in mind:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The more your tests resemble the way your software is used, the more\nconfidence they can give you. - ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/kentcdodds/status/977018512689455106"},"17 Feb 2018")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"If I can't use shallow rendering, how do I mock out components in tests?"),(0,i.kt)("p",null,"In general, you should avoid mocking out components (see\n",(0,i.kt)("a",{parentName:"p",href:"/docs/guiding-principles"},"the Guiding Principles section"),"). However, if you need\nto, then try to use ",(0,i.kt)("a",{parentName:"p",href:"https://ng-mocks.sudo.eu/"},"ng-mocks")," and its\n",(0,i.kt)("a",{parentName:"p",href:"https://ng-mocks.sudo.eu/extra/with-3rd-party#testing-libraryangular-and-mockbuilder"},(0,i.kt)("inlineCode",{parentName:"a"},"MockBuilder")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Component, NgModule} from '@angular/core'\nimport {render, screen} from '@testing-library/angular'\nimport {MockBuilder} from 'ng-mocks'\n\n@Component({\n  selector: 'app-parent-component',\n  template: '<app-child-component></app-child-component>',\n})\nclass ParentComponent {}\n\n@Component({\n  selector: 'app-child-component',\n  template: '<p>Child component</p>',\n})\nclass ChildComponent {}\n\n@NgModule({\n  declarations: [ParentComponent, ChildComponent],\n})\nexport class AppModule {}\n\ndescribe('ParentComponent', () => {\n  it('should not render ChildComponent when shallow rendering', async () => {\n    // all imports, declarations and exports of AppModule will be mocked.\n    const dependencies = MockBuilder(ParentComponent, AppModule).build()\n\n    await render(ParentComponent, dependencies)\n\n    expect(screen.queryByText('Child component')).toBeNull()\n  })\n})\n"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"What level of a component tree should I test? Children, parents, or both?"),(0,i.kt)("p",null,"Following the guiding principle of this library, it is useful to break down how\ntests are organized around how the user experiences and interacts with\napplication functionality rather than around specific components themselves. In\nsome cases, for example for reusable component libraries, it might be useful to\ninclude developers in the list of users to test for and test each of the\nreusable components individually. Other times, the specific break down of a\ncomponent tree is just an implementation detail and testing every component\nwithin that tree individually can cause issues (see\n",(0,i.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/avoid-the-test-user"},"https://kentcdodds.com/blog/avoid-the-test-user"),")."),(0,i.kt)("p",null,"In practice this means that it is often preferable to test high enough up the\ncomponent tree to simulate realistic user interactions. The question of whether\nit is worth additionally testing at a higher or lower level on top of this comes\ndown to a question of tradeoffs and what will provide enough value for the cost\n(see ",(0,i.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests"},"https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests")," on more info\non different levels of testing)."),(0,i.kt)("p",null,"For a more in-depth discussion of this topic see\n",(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/0qmPdcV-rN8"},"this video"),".")))}m.isMDXComponent=!0}}]);