"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[3053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),o=n(6010),i=n(2389),l=n(7392),s=n(7094),u=n(2466);const p="tabList__CuJ",c="tabItem_LNqP";function d(e){var t,n,i=e.lazy,d=e.block,m=e.defaultValue,g=e.values,h=e.groupId,f=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.l)(y,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),w=N.tabGroupChoices,T=N.setTabGroupChoices,O=(0,a.useState)(k),x=O[0],C=O[1],D=[],I=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var E=w[h];null!=E&&E!==x&&y.some((function(e){return e.value===E}))&&C(E)}var M=function(e){var t=e.currentTarget,n=D.indexOf(t),r=y[n].value;r!==x&&(I(t),C(r),null!=h&&T(h,String(r)))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,a=D.indexOf(e.currentTarget)+1;n=null!=(r=D[a])?r:D[0];break;case"ArrowLeft":var o,i=D.indexOf(e.currentTarget)-1;n=null!=(o=D[i])?o:D[D.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},f)},y.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return D.push(e)},onKeyDown:L,onFocus:M,onClick:M},i,{className:(0,o.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,i.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},3552:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>u,metadata:()=>c,toc:()=>m});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=n(5488),l=n(5162),s=["components"],u={id:"api-debugging",title:"Debugging"},p=void 0,c={unversionedId:"dom-testing-library/api-debugging",id:"dom-testing-library/api-debugging",title:"Debugging",description:"Automatic Logging",source:"@site/docs/dom-testing-library/api-debugging.mdx",sourceDirName:"dom-testing-library",slug:"/dom-testing-library/api-debugging",permalink:"/docs/dom-testing-library/api-debugging",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/dom-testing-library/api-debugging.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api-debugging",title:"Debugging"},sidebar:"docs",previous:{title:"Custom Queries",permalink:"/docs/dom-testing-library/api-custom-queries"},next:{title:"Querying Within Elements",permalink:"/docs/dom-testing-library/api-within"}},d={},m=[{value:"Automatic Logging",id:"automatic-logging",level:2},{value:"<code>prettyDOM</code>",id:"prettydom",level:2},{value:"<code>screen.debug()</code>",id:"screendebug",level:2},{value:"<code>screen.logTestingPlaygroundURL()</code>",id:"screenlogtestingplaygroundurl",level:2},{value:"<code>logRoles</code>",id:"logroles",level:2}],g={toc:m};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"automatic-logging"},"Automatic Logging"),(0,o.kt)("p",null,"When any ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," calls you use in your test cases fail, the current\nstate of the ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," (DOM) gets printed on the console. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// <div>Hello world</div>\ngetByText(container, 'Goodbye world') // will fail by throwing error\n")),(0,o.kt)("p",null,"The above test case will fail, however it prints the state of your DOM under\ntest, so you will get to see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Unable to find an element with the text: Goodbye world. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\nHere is the state of your container:\n<div>\n  <div>\n    Hello world\n  </div>\n</div>\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": Since the DOM size can get really large, you can set the limit of DOM\ncontent to be printed via environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG_PRINT_LIMIT"),". The default\nvalue is ",(0,o.kt)("inlineCode",{parentName:"p"},"7000"),". You will see ",(0,o.kt)("inlineCode",{parentName:"p"},"...")," in the console, when the DOM content is\nstripped off, because of the length you have set or due to default size limit.\nHere's how you might increase this limit when running tests:"),(0,o.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"DEBUG_PRINT_LIMIT=10000 npm test\n"))),(0,o.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"DEBUG_PRINT_LIMIT=10000 yarn test\n")))),(0,o.kt)("p",null,"This works on macOS/Linux, you'll need to do something else for Windows. If\nyou'd like a solution that works for both, see\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cross-env"},(0,o.kt)("inlineCode",{parentName:"a"},"cross-env")),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": The output of the DOM is colorized by default if your tests are\nrunning in a node environment. However, you may sometimes want to turn off\ncolors, such as in cases where the output is written to a log file for debugging\npurposes. You can use the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"COLORS")," to explicitly force the\ncolorization off or on. For example:"),(0,o.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"COLORS=false npm test\n"))),(0,o.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"COLORS=false yarn test\n")))),(0,o.kt)("p",null,"This works on macOS/Linux, you'll need to do something else for Windows. If\nyou'd like a solution that works for both, see\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cross-env"},(0,o.kt)("inlineCode",{parentName:"a"},"cross-env")),"."),(0,o.kt)("h2",{id:"prettydom"},(0,o.kt)("inlineCode",{parentName:"h2"},"prettyDOM")),(0,o.kt)("p",null,"Built on top of\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/tree/master/packages/pretty-format"},(0,o.kt)("inlineCode",{parentName:"a"},"pretty-format")),",\nthis helper function can be used to print out readable representation of the DOM\ntree of a node. This can be helpful for instance when debugging tests."),(0,o.kt)("p",null,"It is defined as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Options extends prettyFormat.OptionsReceived {\n  filterNode?: (node: Node) => boolean\n}\n\nfunction prettyDOM(\n  node: HTMLElement,\n  maxLength?: number,\n  options?: Options,\n): string\n")),(0,o.kt)("p",null,"It receives the root node to print out, an optional extra parameter to limit the\nsize of the resulting string, for cases when it becomes too large. It has a last\nparameter which allows you to configure your formatting. In addition to the\noptions listed you can also pass the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/tree/master/packages/pretty-format#usage-with-options"},"options"),"\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"pretty-format"),"."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"<style />"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<script />")," and comment nodes are ignored. You can\nconfigure this behavior by passing a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"filterNode")," function that should\nreturn ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," for every node that you wish to include in the output."),(0,o.kt)("p",null,"This function is usually used alongside ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," to temporarily print out\nDOM trees during tests for debugging purposes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {prettyDOM} from '@testing-library/dom'\n\nconst div = document.createElement('div')\ndiv.innerHTML = '<div><h1>Hello World</h1></div>'\nconsole.log(prettyDOM(div))\n// <div>\n//   <h1>Hello World</h1>\n// </div>\n")),(0,o.kt)("p",null,"This function is what also powers\n",(0,o.kt)("a",{parentName:"p",href:"#debugging"},"the automatic debugging output described above"),"."),(0,o.kt)("h2",{id:"screendebug"},(0,o.kt)("inlineCode",{parentName:"h2"},"screen.debug()")),(0,o.kt)("p",null,"For convenience ",(0,o.kt)("inlineCode",{parentName:"p"},"screen")," also exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," method. This method is\nessentially a shortcut for ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log(prettyDOM())"),". It supports debugging the\ndocument, a single element, or an array of elements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <button>test</button>\n  <span>multi-test</span>\n  <div>multi-test</div>\n`\n\n// debug document\nscreen.debug()\n// debug single element\nscreen.debug(screen.getByText('test'))\n// debug multiple elements\nscreen.debug(screen.getAllByText('multi-test'))\n")),(0,o.kt)("h2",{id:"screenlogtestingplaygroundurl"},(0,o.kt)("inlineCode",{parentName:"h2"},"screen.logTestingPlaygroundURL()")),(0,o.kt)("p",null,"For debugging using ",(0,o.kt)("a",{parentName:"p",href:"https://testing-playground.com"},"testing-playground"),", screen\nexposes this convenient method which logs and returns a URL that can be opened\nin a browser."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <button>test</button>\n  <span>multi-test</span>\n  <div>multi-test</div>\n`\n\n// log entire document to testing-playground\nscreen.logTestingPlaygroundURL()\n// log a single element\nscreen.logTestingPlaygroundURL(screen.getByText('test'))\n")),(0,o.kt)("h2",{id:"logroles"},(0,o.kt)("inlineCode",{parentName:"h2"},"logRoles")),(0,o.kt)("p",null,"This helper function can be used to print out a list of all the implicit ARIA\nroles within a tree of DOM nodes, each role containing a list of all of the\nnodes which match that role. This can be helpful for finding ways to query the\nDOM under test with ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/byrole"},"getByRole"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {logRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\n\nlogRoles(nav)\n")),(0,o.kt)("p",null,"Result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"navigation:\n<nav />\n--------------------------------------------------\nlist:\n<ul />\n--------------------------------------------------\nlistitem:\n<li />\n<li />\n--------------------------------------------------\n")))}h.isMDXComponent=!0}}]);