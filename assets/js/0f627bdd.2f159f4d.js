"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[879],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?i.createElement(y,l(l({ref:t},p),{},{components:n})):i.createElement(y,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],o={id:"api-accessibility",title:"Accessibility"},s=void 0,c={unversionedId:"dom-testing-library/api-accessibility",id:"dom-testing-library/api-accessibility",title:"Accessibility",description:"Testing for Accessibility",source:"@site/docs/dom-testing-library/api-accessibility.mdx",sourceDirName:"dom-testing-library",slug:"/dom-testing-library/api-accessibility",permalink:"/docs/dom-testing-library/api-accessibility",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/dom-testing-library/api-accessibility.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api-accessibility",title:"Accessibility"},sidebar:"docs",previous:{title:"Using Fake Timers",permalink:"/docs/using-fake-timers"},next:{title:"Custom Queries",permalink:"/docs/dom-testing-library/api-custom-queries"}},p={},u=[{value:"Testing for Accessibility",id:"testing-for-accessibility",level:2},{value:"<code>getRoles</code>",id:"getroles",level:2},{value:"<code>isInaccessible</code>",id:"isinaccessible",level:2},{value:"<code>logRoles</code>",id:"logroles",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"testing-for-accessibility"},"Testing for Accessibility"),(0,a.kt)("p",null,"One of the guiding principles of the Testing Library APIs is that they should\nenable you to test your app the way your users use it, including through\naccessibility interfaces like screen readers."),(0,a.kt)("p",null,"See the page on ",(0,a.kt)("a",{parentName:"p",href:"/docs/queries/about#priority"},"queries")," for details on how using a\nsemantic HTML query can make sure your app works with browser accessibility\nAPIs."),(0,a.kt)("h2",{id:"getroles"},(0,a.kt)("inlineCode",{parentName:"h2"},"getRoles")),(0,a.kt)("p",null,"This function allows iteration over the implicit ARIA roles represented in a\ngiven tree of DOM nodes."),(0,a.kt)("p",null,"It returns an object, indexed by role name, with each value being an array of\nelements which have that implicit ARIA role."),(0,a.kt)("p",null,"See\n",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html-aria/#document-conformance-requirements-for-use-of-aria-attributes-in-html"},"ARIA in HTML"),"\nfor more information about implicit ARIA roles."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {getRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\nconsole.log(getRoles(nav))\n\n// Object {\n//   navigation: [<nav />],\n//   list: [<ul />],\n//   listitem: [<li />, <li />]\n// }\n")),(0,a.kt)("h2",{id:"isinaccessible"},(0,a.kt)("inlineCode",{parentName:"h2"},"isInaccessible")),(0,a.kt)("p",null,"This function will compute if the given element should be excluded from the\naccessibility API by the browser. It implements every ",(0,a.kt)("strong",{parentName:"p"},"MUST")," criteria from the\n",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion"},"Excluding Elements from the Accessibility Tree"),"\nsection in WAI-ARIA 1.2 with the exception of checking the ",(0,a.kt)("inlineCode",{parentName:"p"},"role")," attribute."),(0,a.kt)("p",null,"It is defined as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function isInaccessible(element: Element): boolean\n")),(0,a.kt)("h2",{id:"logroles"},(0,a.kt)("inlineCode",{parentName:"h2"},"logRoles")),(0,a.kt)("p",null,"This helper function can be used to print out a list of all the implicit ARIA\nroles within a tree of DOM nodes, each role containing a list of all of the\nnodes which match that role. This can be helpful for finding ways to query the\nDOM under test with ",(0,a.kt)("a",{parentName:"p",href:"/docs/queries/byrole"},"getByRole"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {logRoles} from '@testing-library/dom'\n\nconst nav = document.createElement('nav')\nnav.innerHTML = `\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\n\nlogRoles(nav)\n")),(0,a.kt)("p",null,"Result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"navigation:\n<nav />\n--------------------------------------------------\nlist:\n<ul />\n--------------------------------------------------\nlistitem:\n<li />\n<li />\n--------------------------------------------------\n")))}d.isMDXComponent=!0}}]);