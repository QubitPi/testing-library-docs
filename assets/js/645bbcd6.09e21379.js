"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6183],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),i=n(6010),l=n(2389),o=n(7392),s=n(7094),u=n(2466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){var t,n,l=e.lazy,c=e.block,d=e.defaultValue,h=e.values,g=e.groupId,k=e.className,y=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,o.l)(f,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(t=null!=d?d:null==(n=y.find((function(e){return e.props.default})))?void 0:n.props.value)?t:y[0].props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,s.U)(),w=v.tabGroupChoices,x=v.setTabGroupChoices,T=(0,r.useState)(b),C=T[0],q=T[1],B=[],O=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var j=w[g];null!=j&&j!==C&&f.some((function(e){return e.value===j}))&&q(j)}var A=function(e){var t=e.currentTarget,n=B.indexOf(t),a=f[n].value;a!==C&&(O(t),q(a),null!=g&&x(g,String(a)))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=B.indexOf(e.currentTarget)+1;n=null!=(a=B[r])?a:B[0];break;case"ArrowLeft":var i,l=B.indexOf(e.currentTarget)-1;n=null!=(i=B[l])?i:B[B.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},k)},f.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return B.push(e)},onKeyDown:E,onFocus:A,onClick:A},l,{className:(0,i.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(y.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function d(e){var t=(0,l.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},3616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>u,metadata:()=>m,toc:()=>d});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(5488),o=n(5162),s=["components"],u={id:"about",title:"About Queries"},p=void 0,m={unversionedId:"queries/about",id:"queries/about",title:"About Queries",description:"Overview",source:"@site/docs/queries/about.mdx",sourceDirName:"queries",slug:"/queries/about",permalink:"/docs/queries/about",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/queries/about.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"about",title:"About Queries"},sidebar:"docs",previous:{title:"FAQ",permalink:"/docs/dom-testing-library/faq"},next:{title:"ByRole",permalink:"/docs/queries/byrole"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"Types of Queries",id:"types-of-queries",level:2},{value:"Priority",id:"priority",level:2},{value:"Using Queries",id:"using-queries",level:2},{value:"<code>queryOptions</code>",id:"queryoptions",level:3},{value:"<code>screen</code>",id:"screen",level:3},{value:"<code>TextMatch</code>",id:"textmatch",level:2},{value:"TextMatch Examples",id:"textmatch-examples",level:3},{value:"Precision",id:"precision",level:3},{value:"Normalization",id:"normalization",level:3},{value:"Normalization Examples",id:"normalization-examples",level:4},{value:"Manual Queries",id:"manual-queries",level:2},{value:"Browser extension",id:"browser-extension",level:2},{value:"Playground",id:"playground",level:2}],h={toc:d};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Queries are the methods that Testing Library gives you to find elements on the\npage. There are several ",(0,i.kt)("a",{parentName:"p",href:"#types-of-queries"},"types of queries"),' ("get", "find",\n"query"); the difference between them is whether the query will throw an error\nif no element is found or if it will return a Promise and retry. Depending on\nwhat page content you are selecting, different queries may be more or less\nappropriate. See the ',(0,i.kt)("a",{parentName:"p",href:"#priority"},"priority guide")," for recommendations on how to\nmake use of semantic queries to test your page in the most accessible way."),(0,i.kt)("p",null,"After selecting an element, you can use the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-events"},"Events API")," or\n",(0,i.kt)("a",{parentName:"p",href:"/docs/user-event/intro"},"user-event")," to fire events and simulate user interactions\nwith the page, or use Jest and ",(0,i.kt)("a",{parentName:"p",href:"/docs/ecosystem-jest-dom"},"jest-dom")," to make\nassertions about the element."),(0,i.kt)("p",null,"There are Testing Library helper methods that work with queries. As elements\nappear and disappear in response to actions,\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async"},"Async APIs")," like\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async#waitfor"},(0,i.kt)("inlineCode",{parentName:"a"},"waitFor"))," or\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async#findby-queries"},(0,i.kt)("inlineCode",{parentName:"a"},"findBy")," queries")," can be used\nto await the changes in the DOM. To find only elements that are children of a\nspecific element, you can use ",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-within"},(0,i.kt)("inlineCode",{parentName:"a"},"within")),". If\nnecessary, there are also a few options you can\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-configuration"},"configure"),", like the timeout for\nretries and the default testID attribute."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render, screen} from '@testing-library/react' // (or /dom, /vue, ...)\n\ntest('should show login form', () => {\n  render(<Login />)\n  const input = screen.getByLabelText('Username')\n  // Events and assertions...\n})\n")),(0,i.kt)("h2",{id:"types-of-queries"},"Types of Queries"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single Elements",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getBy..."),": Returns the matching node for a query, and throw a descriptive\nerror if no elements match ",(0,i.kt)("em",{parentName:"li"},"or")," if more than one match is found (use\n",(0,i.kt)("inlineCode",{parentName:"li"},"getAllBy")," instead if more than one element is expected)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queryBy..."),": Returns the matching node for a query, and return ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," if no\nelements match. This is useful for asserting an element that is not present.\nThrows an error if more than one match is found (use ",(0,i.kt)("inlineCode",{parentName:"li"},"queryAllBy")," instead if\nthis is OK)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"findBy..."),": Returns a Promise which resolves when an element is found which\nmatches the given query. The promise is rejected if no element is found or\nif more than one element is found after a default timeout of 1000ms. If you\nneed to find more than one element, use ",(0,i.kt)("inlineCode",{parentName:"li"},"findAllBy"),"."))),(0,i.kt)("li",{parentName:"ul"},"Multiple Elements",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getAllBy..."),": Returns an array of all matching nodes for a query, and\nthrows an error if no elements match."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queryAllBy..."),": Returns an array of all matching nodes for a query, and\nreturn an empty array (",(0,i.kt)("inlineCode",{parentName:"li"},"[]"),") if no elements match."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"findAllBy..."),": Returns a promise which resolves to an array of elements\nwhen any elements are found which match the given query. The promise is\nrejected if no elements are found after a default timeout of ",(0,i.kt)("inlineCode",{parentName:"li"},"1000"),"ms.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"findBy")," methods are a combination of ",(0,i.kt)("inlineCode",{parentName:"li"},"getBy*")," queries and\n",(0,i.kt)("a",{parentName:"li",href:"/docs/dom-testing-library/api-async#waitfor"},(0,i.kt)("inlineCode",{parentName:"a"},"waitFor")),". They accept the\n",(0,i.kt)("inlineCode",{parentName:"li"},"waitFor")," options as the last argument (i.e.\n",(0,i.kt)("inlineCode",{parentName:"li"},"await screen.findByText('text', queryOptions, waitForOptions)"),")")))))),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,"Summary Table"),(0,i.kt)("br",null),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type of Query"),(0,i.kt)("th",{parentName:"tr",align:null},"0 Matches"),(0,i.kt)("th",{parentName:"tr",align:null},"1 Match"),(0,i.kt)("th",{parentName:"tr",align:null},">1 Matches"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Retry (Async/Await)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Single Element")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:"center"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"getBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:null},"Return element"),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:"center"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"queryBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Return ",(0,i.kt)("inlineCode",{parentName:"td"},"null")),(0,i.kt)("td",{parentName:"tr",align:null},"Return element"),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:"center"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"findBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:null},"Return element"),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Multiple Elements")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:"center"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"getAllBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:"center"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"queryAllBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Return ",(0,i.kt)("inlineCode",{parentName:"td"},"[]")),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:"center"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"findAllBy...")),(0,i.kt)("td",{parentName:"tr",align:null},"Throw error"),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:null},"Return array"),(0,i.kt)("td",{parentName:"tr",align:"center"},"Yes"))))),(0,i.kt)("h2",{id:"priority"},"Priority"),(0,i.kt)("p",null,"Based on ",(0,i.kt)("a",{parentName:"p",href:"/docs/guiding-principles"},"the Guiding Principles"),", your test should\nresemble how users interact with your code (component, page, etc.) as much as\npossible. With this in mind, we recommend this order of priority:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Queries Accessible to Everyone")," Queries that reflect the experience of\nvisual/mouse users as well as those that use assistive technology.",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByRole"),": This can be used to query every element that is exposed in\nthe\n",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Glossary/AOM"},"accessibility tree"),".\nWith the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," option you can filter the returned elements by their\n",(0,i.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/accname-1.1/"},"accessible name"),". This should be your\ntop preference for just about everything. There's not much you can't get\nwith this (if you can't, it's possible your UI is inaccessible). Most\noften, this will be used with the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," option like so:\n",(0,i.kt)("inlineCode",{parentName:"li"},"getByRole('button', {name: /submit/i})"),". Check the\n",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#Roles"},"list of roles"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByLabelText"),": This method is really good for form fields. When\nnavigating through a website form, users find elements using label text.\nThis method emulates that behavior, so it should be your top preference."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByPlaceholderText"),":\n",(0,i.kt)("a",{parentName:"li",href:"https://www.nngroup.com/articles/form-design-placeholders/"},"A placeholder is not a substitute for a label"),".\nBut if that's all you have, then it's better than alternatives."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByText"),": Outside of forms, text content is the main way users find\nelements. This method can be used to find non-interactive elements (like\ndivs, spans, and paragraphs)."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByDisplayValue"),": The current value of a form element can be useful\nwhen navigating a page with filled-in values."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Semantic Queries")," HTML5 and ARIA compliant selectors. Note that the user\nexperience of interacting with these attributes varies greatly across\nbrowsers and assistive technology.",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByAltText"),": If your element is one which supports ",(0,i.kt)("inlineCode",{parentName:"li"},"alt")," text (",(0,i.kt)("inlineCode",{parentName:"li"},"img"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"area"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"input"),", and any custom element), then you can use this to find\nthat element."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByTitle"),": The title attribute is not consistently read by\nscreenreaders, and is not visible by default for sighted users"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Test IDs"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"getByTestId"),": The user cannot see (or hear) these, so this is only\nrecommended for cases where you can't match by role or text or it doesn't\nmake sense (e.g. the text is dynamic).")))),(0,i.kt)("h2",{id:"using-queries"},"Using Queries"),(0,i.kt)("p",null,"The base queries from DOM Testing Library require you to pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"container")," as\nthe first argument. Most framework-implementations of Testing Library provide a\npre-bound version of these queries when you render your components with them\nwhich means you ",(0,i.kt)("em",{parentName:"p"},"do not have to provide a container"),". In addition, if you just\nwant to query ",(0,i.kt)("inlineCode",{parentName:"p"},"document.body")," then you can use the ",(0,i.kt)("a",{parentName:"p",href:"#screen"},(0,i.kt)("inlineCode",{parentName:"a"},"screen"))," export as\ndemonstrated below (using ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," is recommended)."),(0,i.kt)("p",null,"The primary argument to a query can be a ",(0,i.kt)("em",{parentName:"p"},"string"),", ",(0,i.kt)("em",{parentName:"p"},"regular expression"),", or\n",(0,i.kt)("em",{parentName:"p"},"function"),". There are also options to adjust how node text is parsed. See\n",(0,i.kt)("a",{parentName:"p",href:"#textmatch"},"TextMatch")," for documentation on what can be passed to a query."),(0,i.kt)("p",null,"Given the following DOM elements (which can be rendered by React, Vue, Angular,\nor plain HTML code):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<body>\n  <div id="app">\n    <label for="username-input">Username</label>\n    <input id="username-input" />\n  </div>\n</body>\n')),(0,i.kt)("p",null,"You can use a query to find an element (byLabelText, in this case):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {screen, getByLabelText} from '@testing-library/dom'\n\n// With screen:\nconst inputNode1 = screen.getByLabelText('Username')\n\n// Without screen, you need to provide a container:\nconst container = document.querySelector('#app')\nconst inputNode2 = getByLabelText(container, 'Username')\n")),(0,i.kt)("h3",{id:"queryoptions"},(0,i.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,i.kt)("p",null,"You can pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"queryOptions")," object with the query type. See the docs for each\nquery type to see available options, e.g. ",(0,i.kt)("a",{parentName:"p",href:"/docs/queries/byrole#api"},"byRole API"),"."),(0,i.kt)("h3",{id:"screen"},(0,i.kt)("inlineCode",{parentName:"h3"},"screen")),(0,i.kt)("p",null,"All of the queries exported by DOM Testing Library accept a ",(0,i.kt)("inlineCode",{parentName:"p"},"container")," as the\nfirst argument. Because querying the entire ",(0,i.kt)("inlineCode",{parentName:"p"},"document.body")," is very common, DOM\nTesting Library also exports a ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," object which has every query that is\npre-bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"document.body")," (using the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-within"},(0,i.kt)("inlineCode",{parentName:"a"},"within"))," functionality). Wrappers such as\nReact Testing Library re-export ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," so you can use it the same way."),(0,i.kt)("p",null,"Here's how you use it:"),(0,i.kt)(l.Z,{defaultValue:"native",values:[{label:"Native",value:"native"},{label:"React",value:"react"},{label:"Angular",value:"angular"},{label:"Cypress",value:"cypress"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"native",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {screen} from '@testing-library/dom'\n\ndocument.body.innerHTML = `\n  <label for=\"example\">Example</label>\n  <input id=\"example\" />\n`\n\nconst exampleInput = screen.getByLabelText('Example')\n"))),(0,i.kt)(o.Z,{value:"react",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render, screen} from '@testing-library/react'\n\nrender(\n  <div>\n    <label htmlFor=\"example\">Example</label>\n    <input id=\"example\" />\n  </div>,\n)\n\nconst exampleInput = screen.getByLabelText('Example')\n"))),(0,i.kt)(o.Z,{value:"angular",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {render, screen} from '@testing-library/angular'\n\nawait render(`\n  <div>\n    <label for=\"example\">Example</label>\n    <input id=\"example\" />\n  </div>\n`)\n\nconst exampleInput = screen.getByLabelText('Example')\n"))),(0,i.kt)(o.Z,{value:"cypress",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cy.findByLabelText('Example').should('exist')\n")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",{parentName:"blockquote"},"You need a global DOM environment to use ",(0,i.kt)("inlineCode",{parentName:"p"},"screen"),". If you're using jest, with\nthe\n",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/configuration#testenvironment-string"},"testEnvironment"),"\nset to ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom"),", a global DOM environment will be available for you."),(0,i.kt)("p",{parentName:"blockquote"},"If you're loading your test with a ",(0,i.kt)("inlineCode",{parentName:"p"},"script")," tag, make sure it comes after the\n",(0,i.kt)("inlineCode",{parentName:"p"},"body"),". An example can be seen\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/testing-library/dom-testing-library/issues/700#issuecomment-692218886"},"here"),".")),(0,i.kt)("h2",{id:"textmatch"},(0,i.kt)("inlineCode",{parentName:"h2"},"TextMatch")),(0,i.kt)("p",null,"Most of the query APIs take a ",(0,i.kt)("inlineCode",{parentName:"p"},"TextMatch")," as an argument, which means the\nargument can be either a ",(0,i.kt)("em",{parentName:"p"},"string"),", ",(0,i.kt)("em",{parentName:"p"},"regex"),", or a ",(0,i.kt)("em",{parentName:"p"},"function")," of signature\n",(0,i.kt)("inlineCode",{parentName:"p"},"(content?: string, element?: Element | null) => boolean")," which returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\nfor a match and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," for a mismatch."),(0,i.kt)("h3",{id:"textmatch-examples"},"TextMatch Examples"),(0,i.kt)("p",null,"Given the following HTML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<div>Hello World</div>\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Will")," find the div:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Matching a string:\nscreen.getByText('Hello World') // full string match\nscreen.getByText('llo Worl', {exact: false}) // substring match\nscreen.getByText('hello world', {exact: false}) // ignore case\n\n// Matching a regex:\nscreen.getByText(/World/) // substring match\nscreen.getByText(/world/i) // substring match, ignore case\nscreen.getByText(/^hello world$/i) // full string match, ignore case\nscreen.getByText(/Hello W?oRlD/i) // substring match, ignore case, searches for \"hello world\" or \"hello orld\"\n\n// Matching with a custom function:\nscreen.getByText((content, element) => content.startsWith('Hello'))\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Will not")," find the div:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// full string does not match\nscreen.getByText('Goodbye World')\n\n// case-sensitive regex with different case\nscreen.getByText(/hello world/)\n\n// function looking for a span when it's actually a div:\nscreen.getByText((content, element) => {\n  return element.tagName.toLowerCase() === 'span' && content.startsWith('Hello')\n})\n")),(0,i.kt)("h3",{id:"precision"},"Precision"),(0,i.kt)("p",null,"Queries that take a ",(0,i.kt)("inlineCode",{parentName:"p"},"TextMatch")," also accept an object as the final argument that\ncan contain options that affect the precision of string matching:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exact"),": Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"; matches full strings, case-sensitive. When false,\nmatches substrings and is not case-sensitive.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it has no effect when used together with ",(0,i.kt)("inlineCode",{parentName:"li"},"regex")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"function")," arguments."),(0,i.kt)("li",{parentName:"ul"},"in most cases, using a regex instead of a string combined with ",(0,i.kt)("inlineCode",{parentName:"li"},"{ exact: false }"),"\ngives you more control over fuzzy matching so it should be preferred."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"normalizer"),": An optional function which overrides normalization behavior. See\n",(0,i.kt)("a",{parentName:"li",href:"#normalization"},(0,i.kt)("inlineCode",{parentName:"a"},"Normalization")),".")),(0,i.kt)("h3",{id:"normalization"},"Normalization"),(0,i.kt)("p",null,"Before running any matching logic against text in the DOM, ",(0,i.kt)("inlineCode",{parentName:"p"},"DOM Testing Library"),"\nautomatically normalizes that text. By default, normalization consists of\ntrimming whitespace from the start and end of text, and ",(0,i.kt)("strong",{parentName:"p"},"collapsing multiple\nadjacent whitespace characters within the string into a single space"),"."),(0,i.kt)("p",null,"If you want to prevent that normalization, or provide alternative normalization\n(e.g. to remove Unicode control characters), you can provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"normalizer"),"\nfunction in the options object. This function will be given a string and is\nexpected to return a normalized version of that string."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",{parentName:"blockquote"},"Specifying a value for ",(0,i.kt)("inlineCode",{parentName:"p"},"normalizer")," ",(0,i.kt)("em",{parentName:"p"},"replaces")," the built-in normalization, but\nyou can call ",(0,i.kt)("inlineCode",{parentName:"p"},"getDefaultNormalizer")," to obtain a built-in normalizer, either to\nadjust that normalization or to call it from your own normalizer.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getDefaultNormalizer")," takes an options object which allows the selection of\nbehaviour:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trim"),": Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". Trims leading and trailing whitespace"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collapseWhitespace"),": Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". Collapses inner whitespace\n(newlines, tabs, repeated spaces) into a single space.")),(0,i.kt)("h4",{id:"normalization-examples"},"Normalization Examples"),(0,i.kt)("p",null,"To perform a match against text without trimming:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"screen.getByText('text', {\n  normalizer: getDefaultNormalizer({trim: false}),\n})\n")),(0,i.kt)("p",null,"To override normalization to remove some Unicode characters whilst keeping some\n(but not all) of the built-in normalization behavior:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"screen.getByText('text', {\n  normalizer: str =>\n    getDefaultNormalizer({trim: false})(str).replace(/[\\u200E-\\u200F]*/g, ''),\n})\n")),(0,i.kt)("h2",{id:"manual-queries"},"Manual Queries"),(0,i.kt)("p",null,"On top of the queries provided by the testing library, you can use the regular\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"},(0,i.kt)("inlineCode",{parentName:"a"},"querySelector")," DOM API"),"\nto query elements. Note that using this as an escape hatch to query by class or\nid is not recommended because they are invisible to the user. Use a testid if\nyou have to, to make your intention to fall back to non-semantic queries clear\nand establish a stable API contract in the HTML."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// @testing-library/react\nconst {container} = render(<MyComponent />)\nconst foo = container.querySelector('[data-foo=\"bar\"]')\n")),(0,i.kt)("h2",{id:"browser-extension"},"Browser extension"),(0,i.kt)("p",null,"Do you still have problems knowing how to use Testing Library queries?"),(0,i.kt)("p",null,"There is a very cool Browser extension for Chrome named\n",(0,i.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/testing-playground/hejbmebodbijjdhflfknehhcgaklhano"},"Testing Playground"),",\nand it helps you find the best queries to select elements. It allows you to\ninspect the element hierarchies in the Browser's Developer Tools, and provides\nyou with suggestions on how to select them, while encouraging good testing\npractices."),(0,i.kt)("h2",{id:"playground"},"Playground"),(0,i.kt)("p",null,"If you want to get more familiar with these queries, you can try them out on\n",(0,i.kt)("a",{parentName:"p",href:"https://testing-playground.com"},"testing-playground.com"),". Testing Playground is\nan interactive sandbox where you can run different queries against your own\nhtml, and get visual feedback matching the rules mentioned above."))}g.isMDXComponent=!0}}]);