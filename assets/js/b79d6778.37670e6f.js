"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[3664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,b=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(b,s(s({ref:t},p),{},{components:n})):r.createElement(b,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],l={id:"examples",title:"Example"},o=void 0,c={unversionedId:"bs-react-testing-library/examples",id:"bs-react-testing-library/examples",title:"Example",description:"You can find more bs-dom-testing-library examples at",source:"@site/docs/bs-react-testing-library/examples.mdx",sourceDirName:"bs-react-testing-library",slug:"/bs-react-testing-library/examples",permalink:"/docs/bs-react-testing-library/examples",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/bs-react-testing-library/examples.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"examples",title:"Example"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/bs-react-testing-library/intro"},next:{title:"Introduction",permalink:"/docs/react-native-testing-library/intro"}},p={},m=[{value:"React Testing Library",id:"react-testing-library",level:2},{value:"DOM Testing Library",id:"dom-testing-library",level:2},{value:"getByText",id:"getbytext",level:3},{value:"FireEvent",id:"fireevent",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can find more bs-dom-testing-library examples at\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wyze/bs-dom-testing-library/tree/master/src/__tests__"},"wyze/bs-dom-testing-library/src/","_","_","tests","_","_"),"."),(0,i.kt)("p",null,"You can find more bs-react-testing-library examples at\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wyze/bs-react-testing-library/tree/master/src/__tests__"},"wyze/bs-react-testing-library/src/","_","_","tests","_","_"),"."),(0,i.kt)("h2",{id:"react-testing-library"},"React Testing Library"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-reason",metastring:'title="Component_test.re"',title:'"Component_test.re"'},'open Jest;\nopen Expect;\nopen ReactTestingLibrary;\n\ntest("Component renders", () =>\n  <div style=ReactDOMRe.Style.make(~color="rebeccapurple", ())>\n    <h1> {ReasonReact.string("Heading")} </h1>\n  </div>\n  |> render\n  |> container\n  |> expect\n  |> toMatchSnapshot\n);\n')),(0,i.kt)("h2",{id:"dom-testing-library"},"DOM Testing Library"),(0,i.kt)("p",null,"The below examples use\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reasonml-community/bs-webapi-incubator"},(0,i.kt)("inlineCode",{parentName:"a"},"bs-webapi"))," to help\nwith typings and creating events."),(0,i.kt)("h3",{id:"getbytext"},"getByText"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-reason",metastring:'title="__tests__/example_test.re"',title:'"__tests__/example_test.re"'},'open Jest;\nopen DomTestingLibrary;\nopen Expect;\n\ntype parser;\n\n[@bs.new]\nexternal domParser : unit => parser = "DOMParser";\n\n[@bs.send.pipe : parser]\nexternal parseFromString : ( string, [@bs.as "text/html"] _) => Dom.element = "";\n\n[@bs.get]\nexternal body : Dom.element => Dom.element = "";\n\n[@bs.get]\nexternal firstChild : Dom.element => Dom.element = "";\n\nlet div = domParser()\n  |> parseFromString({j|\n      <div>\n        <b title="greeting">Hello,</b>\n        <p data-testid="world"> World!</p>\n        <input type="text" placeholder="Enter something" />\n        <input type="text" value="Some value" />\n        <img src="" alt="Alt text" />\n      </div>\n    |j})\n  |> body\n  |> firstChild;\n\ndescribe("getByText", () => {\n  test("works with string matcher", () => {\n    let actual = div |> getByText(~matcher=`Str("Hello,"));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n\n  test("works with regex matcher", () => {\n    let actual = div |> getByText(~matcher=`RegExp([%bs.re "/\\\\w!/"]));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n\n  test("works with function matcher", () => {\n    let matcher = ( _text, node ) => (node |> tagName) === "P";\n    let actual = div |> getByText(~matcher=`Func(matcher));\n\n    expect(actual) |> toMatchSnapshot;\n  });\n});\n')),(0,i.kt)("h2",{id:"fireevent"},"FireEvent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-reason"},'open Jest;\nopen DomTestingLibrary;\nopen Expect;\n\ndescribe("FireEvent", () => {\n  test("click works", () => {\n    open Webapi.Dom;\n\n    let node = document |> Document.createElement("button");\n    let spy = JestJs.inferred_fn();\n    let fn = spy |> MockJs.fn;\n    let clickHandler = _ => [@bs] fn("clicked!") |> ignore;\n\n    node |> Element.addEventListener("click", clickHandler);\n\n    FireEvent.click(node);\n\n    expect(spy |> MockJs.calls) |> toEqual([|"clicked!"|]);\n  });\n\n  test("change works", () => {\n    open Webapi.Dom;\n\n    let node = document |> Document.createElement("input");\n    let spy = JestJs.inferred_fn();\n    let fn = spy |> MockJs.fn;\n    let changeHandler = _ => [@bs] fn("changed!") |> ignore;\n    let event = Event.makeWithOptions("change", { "target": { "value": "1" } });\n\n    node |> Element.addEventListener("change", changeHandler);\n\n    FireEvent.change(node, event);\n\n    expect(spy |> MockJs.calls) |> toEqual([|"changed!"|]);\n  });\n});\n')))}u.isMDXComponent=!0}}]);