"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[3448],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),b=r,d=m["".concat(s,".").concat(b)]||m[b]||p[b]||l;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(7462),r=n(7294),l=n(6010),o=n(2389),i=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var t,n,o=e.lazy,m=e.block,b=e.defaultValue,d=e.values,y=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.l)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===b?b:null!=(t=null!=b?b:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:h[0].props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,s.U)(),T=x.tabGroupChoices,N=x.setTabGroupChoices,w=(0,r.useState)(k),O=w[0],L=w[1],E=[],j=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var B=T[y];null!=B&&B!==O&&v.some((function(e){return e.value===B}))&&L(B)}var C=function(e){var t=e.currentTarget,n=E.indexOf(t),a=v[n].value;a!==O&&(j(t),L(a),null!=y&&N(y,String(a)))},q=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=E.indexOf(e.currentTarget)+1;n=null!=(a=E[r])?a:E[0];break;case"ArrowLeft":var l,o=E.indexOf(e.currentTarget)-1;n=null!=(l=E[o])?l:E[E.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return E.push(e)},onKeyDown:q,onFocus:C,onClick:C},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(h.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function b(e){var t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},1829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>y,frontMatter:()=>u,metadata:()=>p,toc:()=>b});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=n(5488),i=n(5162),s=["components"],u={id:"bylabeltext",title:"ByLabelText"},c=void 0,p={unversionedId:"queries/bylabeltext",id:"queries/bylabeltext",title:"ByLabelText",description:"getByLabelText, queryByLabelText, getAllByLabelText, queryAllByLabelText,",source:"@site/docs/queries/bylabeltext.mdx",sourceDirName:"queries",slug:"/queries/bylabeltext",permalink:"/docs/queries/bylabeltext",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/queries/bylabeltext.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"bylabeltext",title:"ByLabelText"},sidebar:"docs",previous:{title:"ByRole",permalink:"/docs/queries/byrole"},next:{title:"ByPlaceholderText",permalink:"/docs/queries/byplaceholdertext"}},m={},b=[{value:"API",id:"api",level:2},{value:"Options",id:"options",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>selector</code>",id:"selector",level:3}],d={toc:b};function y(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"getByLabelText, queryByLabelText, getAllByLabelText, queryAllByLabelText,\nfindByLabelText, findAllByLabelText")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"getByLabelText(\n  // If you're using `screen`, then skip the container argument:\n  container: HTMLElement,\n  text: TextMatch,\n  options?: {\n    selector?: string = '*',\n    exact?: boolean = true,\n    normalizer?: NormalizerFn,\n  }): HTMLElement\n")),(0,l.kt)("p",null,"This will search for the label that matches the given\n",(0,l.kt)("a",{parentName:"p",href:"/docs/queries/about#textmatch"},(0,l.kt)("inlineCode",{parentName:"a"},"TextMatch")),", then find the element associated\nwith that label."),(0,l.kt)("p",null,"The example below will find the input node for the following DOM structures:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// for/htmlFor relationship between label and form element id\n<label for="username-input">Username</label>\n<input id="username-input" />\n\n// The aria-labelledby attribute with form elements\n<label id="username-label">Username</label>\n<input aria-labelledby="username-label" />\n\n// Wrapper labels\n<label>Username <input /></label>\n\n// Wrapper labels where the label text is in another child element\n<label>\n  <span>Username</span>\n  <input />\n</label>\n\n// aria-label attributes\n// Take care because this is not a label that users can see on the page,\n// so the purpose of your input must be obvious to visual users.\n<input aria-label="Username" />\n')),(0,l.kt)(o.Z,{defaultValue:"native",values:[{label:"Native",value:"native"},{label:"React",value:"react"},{label:"Angular",value:"angular"},{label:"Cypress",value:"cypress"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"native",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {screen} from '@testing-library/dom'\n\nconst inputNode = screen.getByLabelText('Username')\n"))),(0,l.kt)(i.Z,{value:"react",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render, screen} from '@testing-library/react'\n\nrender(<Login />)\n\nconst inputNode = screen.getByLabelText('Username')\n"))),(0,l.kt)(i.Z,{value:"angular",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import {render, screen} from '@testing-library/angular'\n\nawait render(Login)\n\nconst inputNode = screen.getByLabelText('Username')\n"))),(0,l.kt)(i.Z,{value:"cypress",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"cy.findByLabelText('Username').should('exist')\n")))),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("h3",{id:"name"},(0,l.kt)("inlineCode",{parentName:"h3"},"name")),(0,l.kt)("p",null,"The example above does NOT find the input node for label text broken up by\nelements. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"getByRole('textbox', { name: 'Username' })")," instead which\nis robust against switching to ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-label")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-labelledby"),"."),(0,l.kt)("h3",{id:"selector"},(0,l.kt)("inlineCode",{parentName:"h3"},"selector")),(0,l.kt)("p",null,"If it is important that you query a specific element (e.g. an ",(0,l.kt)("inlineCode",{parentName:"p"},"<input>"),") you can\nprovide a ",(0,l.kt)("inlineCode",{parentName:"p"},"selector")," in the options:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// Multiple elements labelled via aria-labelledby\n<label id="username">Username</label>\n<input aria-labelledby="username" />\n<span aria-labelledby="username">Please enter your username</span>\n\n// Multiple labels with the same text\n<label>\n  Username\n  <input />\n</label>\n<label>\n  Username\n  <textarea></textarea>\n</label>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const inputNode = screen.getByLabelText('Username', {selector: 'input'})\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"getByLabelText")," will not work in the case where a ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," attribute on a\n",(0,l.kt)("inlineCode",{parentName:"p"},"<label>")," element matches an ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," attribute on a non-form element.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// This case is not valid\n// for/htmlFor between label and an element that is not a form element\n<section id="photos-section">\n  <label for="photos-section">Photos</label>\n</section>\n')))}y.isMDXComponent=!0}}]);