"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6412],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(u,".").concat(m)]||d[m]||l[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={id:"example-reach-router",title:"Reach Router"},u=void 0,s={unversionedId:"example-reach-router",id:"example-reach-router",title:"Reach Router",description:"",source:"@site/docs/example-reach-router.mdx",sourceDirName:".",slug:"/example-reach-router",permalink:"/docs/example-reach-router",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-reach-router.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-reach-router",title:"Reach Router"},sidebar:"recipes",previous:{title:"React Router",permalink:"/docs/example-react-router"},next:{title:"React Transition Group",permalink:"/docs/example-react-transition-group"}},p={},l=[],d={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render} from '@testing-library/react'\nimport {\n  Router,\n  Link,\n  createHistory,\n  createMemorySource,\n  LocationProvider,\n} from '@reach/router'\nimport '@testing-library/jest-dom'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nfunction App() {\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Router>\n        <Home path=\"/\" />\n        <About path=\"/about\" />\n        <NoMatch default />\n      </Router>\n    </div>\n  )\n}\n\n// Ok, so here's what your tests might look like\n\n// this is a handy function that I would utilize for any component\n// that relies on the router being in context\nfunction renderWithRouter(\n  ui,\n  {route = '/', history = createHistory(createMemorySource(route))} = {},\n) {\n  return {\n    ...render(<LocationProvider history={history}>{ui}</LocationProvider>),\n    // adding `history` to the returned utilities to allow us\n    // to reference it in our tests (just try to avoid using\n    // this to test implementation details).\n    history,\n  }\n}\n\ntest('full app rendering/navigating', async () => {\n  const {\n    container,\n    history: {navigate},\n  } = renderWithRouter(<App />)\n  const appContainer = container\n  // normally I'd use a data-testid, but just wanted to show this is also possible\n  expect(appContainer.innerHTML).toMatch('You are home')\n\n  // with reach-router we don't need to simulate a click event, we can just transition\n  // to the page using the navigate function returned from the history object.\n  await navigate('/about')\n  expect(container.innerHTML).toMatch('You are on the about page')\n})\n\ntest('landing on a bad page', () => {\n  const {container} = renderWithRouter(<App />, {\n    route: '/something-that-does-not-match',\n  })\n  // normally I'd use a data-testid, but just wanted to show this is also possible\n  expect(container.innerHTML).toMatch('No match')\n})\n\n// If your route component has parameters, you'll have to change the render function a little bit\n// example of a route component with parameter\nconst Routes = () => (\n  <Router>\n    <SomeComponent path=\"/some-component/:id\" />\n  </Router>\n)\n\n// render function with Router wrapper from @reach/router\nfunction renderWithRouterWrapper(\n  ui,\n  {route = '/', history = createHistory(createMemorySource(route))} = {},\n) {\n  return {\n    ...render(\n      <LocationProvider history={history}>\n        <Router>{ui}</Router>\n      </LocationProvider>,\n    ),\n    history,\n  }\n}\n\ntest('renders the component with params', () => {\n  // you'll have to declare the path prop in the component, exactly like the route\n  renderWithRouterWrapper(<SomeComponent path=\"/some-component/:id\" />, {\n    // and pass the parameter value on the route config\n    route: '/some-component/1',\n  })\n})\n")))}m.isMDXComponent=!0}}]);