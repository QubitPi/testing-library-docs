"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[8496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,k=u["".concat(d,".").concat(c)]||u[c]||s[c]||o;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"api",title:"API",sidebar_label:"API"},d=void 0,p={unversionedId:"qwik-testing-library/api",id:"qwik-testing-library/api",title:"API",description:"@noma.to/qwik-testing-library re-exports everything from",source:"@site/docs/qwik-testing-library/api.mdx",sourceDirName:"qwik-testing-library",slug:"/qwik-testing-library/api",permalink:"/docs/qwik-testing-library/api",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/qwik-testing-library/api.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api",title:"API",sidebar_label:"API"},sidebar:"docs",previous:{title:"Setup",permalink:"/docs/qwik-testing-library/setup"},next:{title:"FAQ",permalink:"/docs/qwik-testing-library/faq"}},m={},s=[{value:"<code>render</code>",id:"render",level:2},{value:"Render Options",id:"render-options",level:3},{value:"<code>wrapper</code>",id:"wrapper",level:4},{value:"Render Results",id:"render-results",level:3},{value:"<code>baseElement</code>",id:"baseelement",level:4},{value:"<code>container</code>",id:"container",level:4},{value:"<code>asFragment</code>",id:"asfragment",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>unmount</code>",id:"unmount",level:4},{value:"Queries",id:"queries",level:4},{value:"<code>cleanup</code>",id:"cleanup",level:2}],u={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@noma.to/qwik-testing-library")," re-exports everything from\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api"},(0,o.kt)("inlineCode",{parentName:"a"},"@testing-library/dom")),", as well as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#render"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cleanup"},(0,o.kt)("inlineCode",{parentName:"a"},"cleanup")))),(0,o.kt)("h2",{id:"render"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")),(0,o.kt)("p",null,"Render your component to the DOM with Qwik. By default, when no options are\nprovided, the component will be rendered into a ",(0,o.kt)("inlineCode",{parentName:"p"},"<host>")," appended to\n",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {render} from '@noma.to/qwik-testing-library'\nimport {MockProvider} from './MockProvider'\nimport {MyComponent} from './MyComponent'\n\nconst result = await render(<MyComponent />, {\n  baseElement: document.body,\n  container: document.createElement('host'),\n  wrapper: MockProvider,\n})\n")),(0,o.kt)("h3",{id:"render-options"},"Render Options"),(0,o.kt)("p",null,"You may also customize how Qwik Testing Library renders your component. Most of\nthe time, you shouldn't need to modify these options."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"container")),(0,o.kt)("td",{parentName:"tr",align:null},"The container in which the component is rendered."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"document.createElement('host')"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"baseElement")),(0,o.kt)("td",{parentName:"tr",align:null},"The base element for queries and ",(0,o.kt)("a",{parentName:"td",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug")),"."),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"document.body"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"queries")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/dom-testing-library/api-custom-queries"},"Custom Queries"),"."),(0,o.kt)("td",{parentName:"tr",align:null},"N/A")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"wrapper")),(0,o.kt)("td",{parentName:"tr",align:null},"The wrapper to provide a context to the component."),(0,o.kt)("td",{parentName:"tr",align:null},"N/A")))),(0,o.kt)("h4",{id:"wrapper"},(0,o.kt)("inlineCode",{parentName:"h4"},"wrapper")),(0,o.kt)("p",null,"You can wrap your component into a wrapper to provide a context and other\nfunctionalities needed by the component under test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {render} from '@noma.to/qwik-testing-library'\nimport {QwikCityMockProvider} from '@builder.io/qwik-city'\n\nawait render(<MyComponent />, {wrapper: QwikCityMockProvider})\n")),(0,o.kt)("h3",{id:"render-results"},"Render Results"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Result"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))),(0,o.kt)("td",{parentName:"tr",align:null},"The base DOM element used for queries.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#container"},(0,o.kt)("inlineCode",{parentName:"a"},"container"))),(0,o.kt)("td",{parentName:"tr",align:null},"The DOM element the component is mounted to.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#asFragment"},(0,o.kt)("inlineCode",{parentName:"a"},"asFragment"))),(0,o.kt)("td",{parentName:"tr",align:null},"Convert the DOM element to a ",(0,o.kt)("inlineCode",{parentName:"td"},"DocumentFragment"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#debug"},(0,o.kt)("inlineCode",{parentName:"a"},"debug"))),(0,o.kt)("td",{parentName:"tr",align:null},"Log elements using ",(0,o.kt)("a",{parentName:"td",href:"/docs/dom-testing-library/api-debugging#prettydom"},(0,o.kt)("inlineCode",{parentName:"a"},"prettyDOM")),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#unmount"},(0,o.kt)("inlineCode",{parentName:"a"},"unmount"))),(0,o.kt)("td",{parentName:"tr",align:null},"Unmount and destroy the component.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#queries"},(0,o.kt)("inlineCode",{parentName:"a"},"...queries"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/docs/queries/about"},"Query functions")," bound to ",(0,o.kt)("inlineCode",{parentName:"td"},"baseElement"),".")))),(0,o.kt)("h4",{id:"baseelement"},(0,o.kt)("inlineCode",{parentName:"h4"},"baseElement")),(0,o.kt)("p",null,"The base DOM element that queries are bound to. Corresponds to\n",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.baseElement"),". If you do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.baseElement"),", this\nwill be ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),"."),(0,o.kt)("h4",{id:"container"},(0,o.kt)("inlineCode",{parentName:"h4"},"container")),(0,o.kt)("p",null,"The DOM element the component is mounted in. Corresponds to\n",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.container"),". If you do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.container"),", this\nwill be ",(0,o.kt)("inlineCode",{parentName:"p"},"document.createElement('host')"),". In general, avoid using ",(0,o.kt)("inlineCode",{parentName:"p"},"container"),"\ndirectly to query for elements; use ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"testing-library queries"),"\ninstead."),(0,o.kt)("h4",{id:"asfragment"},(0,o.kt)("inlineCode",{parentName:"h4"},"asFragment")),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentFragment")," of your rendered component. This can be useful if\nyou need to avoid live bindings and see how your component reacts to events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {component$} from '@builder.io/qwik';\nimport {render} from '@testing-library/react';\nimport {userEvent} from \"@testing-library/user-event\";\n\nconst TestComponent = component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button onClick$={() => (count.value++))}>\n      Click to increase: {count}\n    </button>\n  )\n});\n\nconst {getByText, asFragment} = await render(<TestComponent />)\nconst firstRender = asFragment()\n\nuserEvent.click(getByText(/Click to increase/))\n\n// This will snapshot only the difference between the first render, and the\n// state of the DOM after the click event.\n// See https://github.com/jest-community/snapshot-diff\nexpect(firstRender).toMatchDiffSnapshot(asFragment())\n")),(0,o.kt)("h4",{id:"debug"},(0,o.kt)("inlineCode",{parentName:"h4"},"debug")),(0,o.kt)("p",null,"Log the ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," or a given element using ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-debugging#prettydom"},(0,o.kt)("inlineCode",{parentName:"a"},"prettyDOM")),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If your ",(0,o.kt)("inlineCode",{parentName:"p"},"baseElement")," is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),", we recommend using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-debugging#screendebug"},(0,o.kt)("inlineCode",{parentName:"a"},"screen.debug")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {render, screen} from '@noma.to/qwik-testing-library'\n\nconst {debug} = await render(<MyComponent />)\n\nconst button = screen.getByRole('button')\n\n// log `document.body`\nscreen.debug()\n\n// log your custom the `baseElement`\ndebug()\n\n// log a specific element\nscreen.debug(button)\ndebug(button)\n")),(0,o.kt)("h4",{id:"unmount"},(0,o.kt)("inlineCode",{parentName:"h4"},"unmount")),(0,o.kt)("p",null,"Unmount and destroy the Qwik component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const {unmount} = await render(<MyComponent />)\n\nunmount()\n")),(0,o.kt)("h4",{id:"queries"},"Queries"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},"Query functions")," bound to the ",(0,o.kt)("a",{parentName:"p",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement")),".\nIf you passed ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-custom-queries"},"custom queries")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),", those will be\navailable instead of the default queries."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If your ",(0,o.kt)("a",{parentName:"p",href:"#baseelement"},(0,o.kt)("inlineCode",{parentName:"a"},"baseElement"))," is the default ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body"),", we\nrecommend using ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about#screen"},(0,o.kt)("inlineCode",{parentName:"a"},"screen"))," rather than bound queries.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {render, screen} from '@noma.to/qwik-testing-library'\n\nconst {getByRole} = await render(<MyComponent />)\n\n// query `document.body`\nconst button = screen.getByRole('button')\n\n// query using a custom `target` or `baseElement`\nconst button = getByRole('button')\n")),(0,o.kt)("h2",{id:"cleanup"},(0,o.kt)("inlineCode",{parentName:"h2"},"cleanup")),(0,o.kt)("p",null,"Destroy all components and remove any elements added to ",(0,o.kt)("inlineCode",{parentName:"p"},"document.body")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"renderOptions.baseElement"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {render, cleanup} from '@noma.to/qwik-testing-library'\n\n// Default: runs after each test\nafterEach(() => {\n  cleanup()\n})\n\nawait render(<MyComponent />)\n\n// Called manually for more control\ncleanup()\n")))}c.isMDXComponent=!0}}]);