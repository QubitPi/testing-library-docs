"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[4354],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6854:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={id:"example-intro",title:"Example",sidebar_label:"Example"},l=void 0,c={unversionedId:"react-testing-library/example-intro",id:"react-testing-library/example-intro",title:"Example",description:"Quickstart",source:"@site/docs/react-testing-library/example-intro.mdx",sourceDirName:"react-testing-library",slug:"/react-testing-library/example-intro",permalink:"/docs/react-testing-library/example-intro",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/react-testing-library/example-intro.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-intro",title:"Example",sidebar_label:"Example"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/react-testing-library/intro"},next:{title:"Setup",permalink:"/docs/react-testing-library/setup"}},p={},d=[{value:"Quickstart",id:"quickstart",level:2},{value:"Full Example",id:"full-example",level:2},{value:"Step-By-Step",id:"step-by-step",level:2},{value:"Imports",id:"imports",level:3},{value:"Mock",id:"mock",level:3},{value:"Arrange",id:"arrange",level:3},{value:"Act",id:"act",level:3},{value:"Assert",id:"assert",level:3},{value:"System Under Test",id:"system-under-test",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"This is a minimal setup to get you started. If you want to see a description of\nwhat each line does, scroll down to the\n",(0,o.kt)("a",{parentName:"p",href:"#quickstart-annotated"},"annotated version"),". Scroll down to\n",(0,o.kt)("a",{parentName:"p",href:"#full-example"},"Full Example")," to see a more advanced test setup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\nimport Fetch from './fetch'\n\ntest('loads and displays greeting', async () => {\n  // ARRANGE\n  render(<Fetch url=\"/greeting\" />)\n\n  // ACT\n  await userEvent.click(screen.getByText('Load Greeting'))\n  await screen.findByRole('heading')\n\n  // ASSERT\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n")),(0,o.kt)("details",{id:"quickstart-annotated"},(0,o.kt)("summary",null,"Quickstart (Annotated Example)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// import react-testing methods\nimport {render, screen} from '@testing-library/react'\n// userEvent library simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.\nimport userEvent from '@testing-library/user-event'\n// add custom jest matchers from jest-dom\nimport '@testing-library/jest-dom'\n// the component to test\nimport Fetch from './fetch'\n\ntest('loads and displays greeting', async () => {\n  // Render a React element into the DOM\n  render(<Fetch url=\"/greeting\" />)\n\n  await userEvent.click(screen.getByText('Load Greeting'))\n  // wait before throwing an error if it cannot find an element\n  await screen.findByRole('heading')\n\n  // assert that the alert message is correct using\n  // toHaveTextContent, a custom matcher from jest-dom.\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n"))),(0,o.kt)("h2",{id:"full-example"},"Full Example"),(0,o.kt)("p",null,"See the following sections for a detailed breakdown of the test"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"We recommend using the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mswjs/msw"},"Mock Service Worker (MSW)")," library to\ndeclaratively mock API communication in your tests instead of stubbing\n",(0,o.kt)("inlineCode",{parentName:"p"},"window.fetch"),", or relying on third-party adapters.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Our example here uses axios to make its API calls. If your application uses ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch"},(0,o.kt)("inlineCode",{parentName:"a"},"fetch()"))," to make its API calls, then be aware that by default JSDOM does not include fetch. If you are using vitest as your test runner, it will be included for you. For jest you may wish to manually polyfill ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch()")," or use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mswjs/jest-fixed-jsdom"},"jest-fixed-jsdom")," environment which includes fetch. ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="__tests__/fetch.test.jsx"',title:'"__tests__/fetch.test.jsx"'},"import React from 'react'\nimport {http, HttpResponse} from 'msw'\nimport {setupServer} from 'msw/node'\nimport {render, fireEvent, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport Fetch from '../fetch'\n\nconst server = setupServer(\n  http.get('/greeting', () => {\n    return HttpResponse.json({greeting: 'hello there'})\n  }),\n)\n\nbeforeAll(() => server.listen())\nafterEach(() => server.resetHandlers())\nafterAll(() => server.close())\n\ntest('loads and displays greeting', async () => {\n  render(<Fetch url=\"/greeting\" />)\n\n  fireEvent.click(screen.getByText('Load Greeting'))\n\n  await screen.findByRole('heading')\n\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there')\n  expect(screen.getByRole('button')).toBeDisabled()\n})\n\ntest('handles server error', async () => {\n  server.use(\n    http.get('/greeting', () => {\n      return new HttpResponse(null, {status: 500})\n    }),\n  )\n\n  render(<Fetch url=\"/greeting\" />)\n\n  fireEvent.click(screen.getByText('Load Greeting'))\n\n  await screen.findByRole('alert')\n\n  expect(screen.getByRole('alert')).toHaveTextContent('Oops, failed to fetch!')\n  expect(screen.getByRole('button')).not.toBeDisabled()\n})\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-by-step"},"Step-By-Step"),(0,o.kt)("h3",{id:"imports"},"Imports"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// import dependencies\nimport React from 'react'\n\n// import API mocking utilities from Mock Service Worker\nimport {http, HttpResponse} from 'msw'\nimport {setupServer} from 'msw/node'\n\n// import react-testing methods\nimport {render, fireEvent, screen} from '@testing-library/react'\n\n// add custom jest matchers from jest-dom\nimport '@testing-library/jest-dom'\n// the component to test\nimport Fetch from '../fetch'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"test('loads and displays greeting', async () => {\n  // Arrange\n  // Act\n  // Assert\n})\n")),(0,o.kt)("h3",{id:"mock"},"Mock"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setupServer")," function from ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," to mock an API request that our tested\ncomponent makes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// declare which API requests to mock\nconst server = setupServer(\n  // capture \"GET /greeting\" requests\n  http.get('/greeting', (req, res, ctx) => {\n    // respond using a mocked JSON body\n    return HttpResponse.json({greeting: 'hello there'})\n  }),\n)\n\n// establish API mocking before all tests\nbeforeAll(() => server.listen())\n// reset any request handlers that are declared as a part of our tests\n// (i.e. for testing one-time error scenarios)\nafterEach(() => server.resetHandlers())\n// clean up once the tests are done\nafterAll(() => server.close())\n\n// ...\n\ntest('handles server error', async () => {\n  server.use(\n    // override the initial \"GET /greeting\" request handler\n    // to return a 500 Server Error\n    http.get('/greeting', (req, res, ctx) => {\n      return new HttpResponse(null, {status: 500})\n    }),\n  )\n\n  // ...\n})\n")),(0,o.kt)("h3",{id:"arrange"},"Arrange"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/react-testing-library/api#render"},(0,o.kt)("inlineCode",{parentName:"a"},"render"))," method renders a React element into the DOM."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'render(<Fetch url="/greeting" />)\n')),(0,o.kt)("h3",{id:"act"},"Act"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-events"},(0,o.kt)("inlineCode",{parentName:"a"},"fireEvent"))," method allows you to fire\nevents to simulate user actions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"fireEvent.click(screen.getByText('Load Greeting'))\n\n// wait until the `get` request promise resolves and\n// the component calls setState and re-renders,\n// throwing an error if it cannot find an element\nawait screen.findByRole('heading')\n")),(0,o.kt)("h3",{id:"assert"},"Assert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// assert that the alert message is correct using\n// toHaveTextContent, a custom matcher from jest-dom.\nexpect(screen.getByRole('alert')).toHaveTextContent('Oops, failed to fetch!')\n\n// assert that the button is not disabled using\n// toBeDisabled, a custom matcher from jest-dom.\nexpect(screen.getByRole('button')).not.toBeDisabled()\n")),(0,o.kt)("h3",{id:"system-under-test"},"System Under Test"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="fetch.jsx"',title:'"fetch.jsx"'},"import React, {useState, useReducer} from 'react'\nimport axios from 'axios'\n\nconst initialState = {\n  error: null,\n  greeting: null,\n}\n\nfunction greetingReducer(state, action) {\n  switch (action.type) {\n    case 'SUCCESS': {\n      return {\n        error: null,\n        greeting: action.greeting,\n      }\n    }\n    case 'ERROR': {\n      return {\n        error: action.error,\n        greeting: null,\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport default function Fetch({url}) {\n  const [{error, greeting}, dispatch] = useReducer(\n    greetingReducer,\n    initialState,\n  )\n  const [buttonClicked, setButtonClicked] = useState(false)\n\n  const fetchGreeting = async url =>\n    axios\n      .get(url)\n      .then(response => {\n        const {data} = response\n        const {greeting} = data\n        dispatch({type: 'SUCCESS', greeting})\n        setButtonClicked(true)\n      })\n      .catch(error => {\n        dispatch({type: 'ERROR', error})\n      })\n\n  const buttonText = buttonClicked ? 'Ok' : 'Load Greeting'\n\n  return (\n    <div>\n      <button onClick={() => fetchGreeting(url)} disabled={buttonClicked}>\n        {buttonText}\n      </button>\n      {greeting && <h1>{greeting}</h1>}\n      {error && <p role=\"alert\">Oops, failed to fetch!</p>}\n    </div>\n  )\n}\n")))}u.isMDXComponent=!0}}]);