"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),r=n(7294),l=n(6010),i=n(2389),o=n(7392),p=n(7094),s=n(2466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n,i=e.lazy,m=e.block,c=e.defaultValue,k=e.values,N=e.groupId,h=e.className,g=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=k?k:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,o.l)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===c?c:null!=(t=null!=c?c:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:g[0].props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,p.U)(),C=y.tabGroupChoices,x=y.setTabGroupChoices,w=(0,r.useState)(f),E=w[0],T=w[1],j=[],B=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=N){var S=C[N];null!=S&&S!==E&&v.some((function(e){return e.value===S}))&&T(S)}var A=function(e){var t=e.currentTarget,n=j.indexOf(t),a=v[n].value;a!==E&&(B(t),T(a),null!=N&&x(N,String(a)))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=j.indexOf(e.currentTarget)+1;n=null!=(a=j[r])?a:j[0];break;case"ArrowLeft":var l,i=j.indexOf(e.currentTarget)-1;n=null!=(l=j[i])?l:j[j.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},h)},v.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return j.push(e)},onKeyDown:O,onFocus:A,onClick:A},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(g.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function c(e){var t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},2877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>N,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=n(5488),o=n(5162),p=["components"],s={id:"v13",title:"user-event v13"},d=void 0,u={unversionedId:"user-event/v13",id:"user-event/v13",title:"user-event v13",description:"user-event is a companion library for Testing Library that provides more",source:"@site/docs/user-event/v13.mdx",sourceDirName:"user-event",slug:"/user-event/v13",permalink:"/docs/user-event/v13",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/user-event/v13.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"v13",title:"user-event v13"},sidebar:"docs",previous:{title:"Convenience APIs",permalink:"/docs/user-event/convenience"},next:{title:"jest-dom",permalink:"/docs/ecosystem-jest-dom"}},m={},c=[{value:"Installation",id:"installation",level:2},{value:"API",id:"api",level:2},{value:"<code>click(element, eventInit, options)</code>",id:"clickelement-eventinit-options",level:3},{value:"Pointer events options",id:"pointer-events-options",level:4},{value:"<code>dblClick(element, eventInit, options)</code>",id:"dblclickelement-eventinit-options",level:3},{value:"<code>type(element, text, [options])</code>",id:"typeelement-text-options",level:3},{value:"Special characters",id:"special-characters",level:4},{value:"<code>&lt;input type=&quot;time&quot; /&gt;</code> support",id:"input-typetime--support",level:4},{value:"<code>keyboard(text, options)</code>",id:"keyboardtext-options",level:3},{value:"<code>upload(element, file, [{ clickInit, changeInit }], [options])</code>",id:"uploadelement-file--clickinit-changeinit--options",level:3},{value:"<code>clear(element)</code>",id:"clearelement",level:3},{value:"<code>selectOptions(element, values, options)</code>",id:"selectoptionselement-values-options",level:3},{value:"<code>deselectOptions(element, values, options)</code>",id:"deselectoptionselement-values-options",level:3},{value:"<code>tab({shift, focusTrap})</code>",id:"tabshift-focustrap",level:3},{value:"<code>hover(element, options)</code>",id:"hoverelement-options",level:3},{value:"<code>unhover(element, options)</code>",id:"unhoverelement-options",level:3},{value:"<code>paste(element, text, eventInit, options)</code>",id:"pasteelement-text-eventinit-options",level:3},{value:"<code>specialChars</code>",id:"specialchars",level:3}],k={toc:c};function N(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/testing-library/user-event"},(0,l.kt)("inlineCode",{parentName:"a"},"user-event"))," is a companion library for Testing Library that provides more\nadvanced simulation of browser interactions than the built-in\n",(0,l.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-events#fireevent"},(0,l.kt)("inlineCode",{parentName:"a"},"fireEvent"))," method."),(0,l.kt)("admonition",{title:"End of life",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This page describes ",(0,l.kt)("inlineCode",{parentName:"p"},"user-event@13.5.0"),".",(0,l.kt)("br",{parentName:"p"}),"\n","This version is no longer maintained. Please use\n",(0,l.kt)("a",{parentName:"p",href:"/docs/user-event/intro"},(0,l.kt)("inlineCode",{parentName:"a"},"user-event@14"))," instead, as it includes important bug\nfixes and new features.")),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @testing-library/user-event @testing-library/dom\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev @testing-library/user-event @testing-library/dom\n")))),(0,l.kt)("p",null,"Now simply import it in your tests:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import userEvent from '@testing-library/user-event'\n\n// or\n\nconst {default: userEvent} = require('@testing-library/user-event')\n")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("p",null,"Note: All userEvent methods are synchronous with one exception: when ",(0,l.kt)("inlineCode",{parentName:"p"},"delay"),"\noption used with ",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.type")," as described below. We also discourage using\n",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent")," inside ",(0,l.kt)("inlineCode",{parentName:"p"},"before/after")," blocks at all, for important reasons described\nin\n",(0,l.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/avoid-nesting-when-youre-testing"},'"Avoid Nesting When You\'re Testing"'),"."),(0,l.kt)("h3",{id:"clickelement-eventinit-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"click(element, eventInit, options)")),(0,l.kt)("p",null,"Clicks ",(0,l.kt)("inlineCode",{parentName:"p"},"element"),", depending on what ",(0,l.kt)("inlineCode",{parentName:"p"},"element")," is clicked, calling ",(0,l.kt)("inlineCode",{parentName:"p"},"click()")," can\nhave different side effects."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('click', () => {\n  render(\n    <div>\n      <label htmlFor=\"checkbox\">Check</label>\n      <input id=\"checkbox\" type=\"checkbox\" />\n    </div>,\n  )\n\n  userEvent.click(screen.getByText('Check'))\n  expect(screen.getByLabelText('Check')).toBeChecked()\n})\n")),(0,l.kt)("p",null,"You can also ctrlClick / shiftClick etc with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.click(elem, {ctrlKey: true, shiftKey: true})\n")),(0,l.kt)("p",null,"See the\n",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent"},(0,l.kt)("inlineCode",{parentName:"a"},"MouseEvent")),"\nconstructor documentation for more options."),(0,l.kt)("p",null,"Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"click")," will trigger hover events before clicking. To disable this,\nset the ",(0,l.kt)("inlineCode",{parentName:"p"},"skipHover")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h4",{id:"pointer-events-options"},"Pointer events options"),(0,l.kt)("p",null,"Trying to click an element with ",(0,l.kt)("inlineCode",{parentName:"p"},"pointer-events")," being set to ",(0,l.kt)("inlineCode",{parentName:"p"},'"none"')," (i.e.\nunclickable) will throw an error. If you want to disable this behavior you can\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"skipPointerEventsCheck")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.click(elem, undefined, {skipPointerEventsCheck: true})\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"skipPointerEventsCheck")," option can be passed to any pointer related API\nincluding:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#dblclickelement-eventinit-options"},"dblClick")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hoverelement-options"},"hover")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#unhoverelement-options"},"unhover")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#selectoptionselement-values-options"},"selectOptions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#deselectoptionselement-values-options"},"deselectOptions"))),(0,l.kt)("h3",{id:"dblclickelement-eventinit-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"dblClick(element, eventInit, options)")),(0,l.kt)("p",null,"Clicks ",(0,l.kt)("inlineCode",{parentName:"p"},"element")," twice, depending on what ",(0,l.kt)("inlineCode",{parentName:"p"},"element")," is it can have different\nside effects."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('double click', () => {\n  const onChange = jest.fn()\n  render(<input type=\"checkbox\" onChange={onChange} />)\n  const checkbox = screen.getByRole('checkbox')\n  userEvent.dblClick(checkbox)\n  expect(onChange).toHaveBeenCalledTimes(2)\n  expect(checkbox).not.toBeChecked()\n})\n")),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," includes ",(0,l.kt)("a",{parentName:"p",href:"#pointer-events-options"},"Pointer events options")),(0,l.kt)("h3",{id:"typeelement-text-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"type(element, text, [options])")),(0,l.kt)("p",null,"Writes ",(0,l.kt)("inlineCode",{parentName:"p"},"text")," inside an ",(0,l.kt)("inlineCode",{parentName:"p"},"<input>")," or a ",(0,l.kt)("inlineCode",{parentName:"p"},"<textarea>"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('type', () => {\n  render(<textarea />)\n\n  userEvent.type(screen.getByRole('textbox'), 'Hello,{enter}World!')\n  expect(screen.getByRole('textbox')).toHaveValue('Hello,\\nWorld!')\n})\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"options.delay")," is the number of milliseconds that pass between two characters\nare typed. By default it's 0. You can use this option if your component has a\ndifferent behavior for fast or slow users. If you do this, you need to make sure\nto ",(0,l.kt)("inlineCode",{parentName:"p"},"await"),"!"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"type")," will click the element before typing. To disable this, set the\n",(0,l.kt)("inlineCode",{parentName:"p"},"skipClick")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h4",{id:"special-characters"},"Special characters"),(0,l.kt)("p",null,"The following special character strings are supported:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Text string"),(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifier"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{enter}")),(0,l.kt)("td",{parentName:"tr",align:null},"Enter"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Will insert a newline character (",(0,l.kt)("inlineCode",{parentName:"td"},"<textarea />")," only).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{space}")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"' '")),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{esc}")),(0,l.kt)("td",{parentName:"tr",align:null},"Escape"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{backspace}")),(0,l.kt)("td",{parentName:"tr",align:null},"Backspace"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Will delete the previous character (or the characters within the ",(0,l.kt)("inlineCode",{parentName:"td"},"selectedRange"),", see example below).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{del}")),(0,l.kt)("td",{parentName:"tr",align:null},"Delete"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Will delete the next character (or the characters within the ",(0,l.kt)("inlineCode",{parentName:"td"},"selectedRange"),", see example below)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{selectall}")),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Selects all the text of the element. Note that this will only work for elements that support selection ranges (so, not ",(0,l.kt)("inlineCode",{parentName:"td"},"email"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"password"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),", among others)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowleft}")),(0,l.kt)("td",{parentName:"tr",align:null},"ArrowLeft"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowright}")),(0,l.kt)("td",{parentName:"tr",align:null},"ArrowRight"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowup}")),(0,l.kt)("td",{parentName:"tr",align:null},"ArrowUp"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowdown}")),(0,l.kt)("td",{parentName:"tr",align:null},"ArrowDown"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{home}")),(0,l.kt)("td",{parentName:"tr",align:null},"Home"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{end}")),(0,l.kt)("td",{parentName:"tr",align:null},"End"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{shift}")),(0,l.kt)("td",{parentName:"tr",align:null},"Shift"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shiftKey")),(0,l.kt)("td",{parentName:"tr",align:null},"Does ",(0,l.kt)("strong",{parentName:"td"},"not")," capitalize following characters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{ctrl}")),(0,l.kt)("td",{parentName:"tr",align:null},"Control"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ctrlKey")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{alt}")),(0,l.kt)("td",{parentName:"tr",align:null},"Alt"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"altKey")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{meta}")),(0,l.kt)("td",{parentName:"tr",align:null},"OS"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"metaKey")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{capslock}")),(0,l.kt)("td",{parentName:"tr",align:null},"CapsLock"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"modifierCapsLock")),(0,l.kt)("td",{parentName:"tr",align:null},'Fires both keydown and keyup when used (simulates a user clicking their "Caps Lock" button to enable caps lock).')))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"A note about modifiers:")," Modifier keys (",(0,l.kt)("inlineCode",{parentName:"p"},"{shift}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"{ctrl}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"{alt}"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"{meta}"),") will activate their corresponding event modifiers for the duration\nof type command or until they are closed (via ",(0,l.kt)("inlineCode",{parentName:"p"},"{/shift}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"{/ctrl}"),", etc.). If\nthey are not closed explicitly, then events will be fired to close them\nautomatically (to disable this, set the ",(0,l.kt)("inlineCode",{parentName:"p"},"skipAutoClose")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),").")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"We take the same\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.cypress.io/api/commands/type.html#Modifiers"},"stance as Cypress"),"\nin that we do not simulate the behavior that happens with modifier key\ncombinations as different operating systems function differently in this\nregard.")),(0,l.kt)("p",null,"An example of an usage with a selection range:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('delete characters within the selectedRange', () => {\n  render(\n    <div>\n      <label htmlFor=\"my-input\">Example:</label>\n      <input id=\"my-input\" type=\"text\" value=\"This is a bad example\" />\n    </div>,\n  )\n  const input = screen.getByLabelText(/example/i)\n  input.setSelectionRange(10, 13)\n  userEvent.type(input, '{backspace}good')\n\n  expect(input).toHaveValue('This is a good example')\n")),(0,l.kt)("p",null,"By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," appends to the existing text. To prepend text, reset the\nelement's selection range and provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"initialSelectionStart")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"initialSelectionEnd")," options:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('prepend text', () => {\n  render(<input defaultValue=\"World!\" />)\n  const element = screen.getByRole('textbox')\n\n  // Prepend text\n  element.setSelectionRange(0, 0)\n  userEvent.type(element, 'Hello, ', {\n    initialSelectionStart: 0,\n    initialSelectionEnd: 0,\n  })\n\n  expect(element).toHaveValue('Hello, World!')\n})\n")),(0,l.kt)("h4",{id:"input-typetime--support"},(0,l.kt)("inlineCode",{parentName:"h4"},'<input type="time" />')," support"),(0,l.kt)("p",null,"The following is an example of usage of this library with\n",(0,l.kt)("inlineCode",{parentName:"p"},'<input type="time" />')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('types into the input', () => {\n  render(\n    <>\n      <label for=\"time\">Enter a time</label>\n      <input type=\"time\" id=\"time\" />\n    </>,\n  )\n  const input = screen.getByLabelText(/enter a time/i)\n  userEvent.type(input, '13:58')\n  expect(input.value).toBe('13:58')\n})\n")),(0,l.kt)("h3",{id:"keyboardtext-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"keyboard(text, options)")),(0,l.kt)("p",null,"Simulates the keyboard events described by ",(0,l.kt)("inlineCode",{parentName:"p"},"text"),". This is similar to\n",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.type()")," but without any clicking or changing the selection range."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You should use ",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.keyboard")," if you want to just simulate pressing\nbuttons on the keyboard. You should use ",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.type")," if you just want to\nconveniently insert some text into an input field or textarea.")),(0,l.kt)("p",null,"Keystrokes can be described:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Per printable character",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('foo') // translates to: f, o, o\n")),"The brackets ",(0,l.kt)("inlineCode",{parentName:"li"},"{")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"[")," are used as special character and can be referenced\nby doubling them.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('{{a[[') // translates to: {, a, [\n"))),(0,l.kt)("li",{parentName:"ul"},"Per\n",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key"},"KeyboardEvent.key"),"\n(only supports alphanumeric values of ",(0,l.kt)("inlineCode",{parentName:"li"},"key"),")",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('{Shift}{f}{o}{o}') // translates to: Shift, f, o, o\n")),"This does not keep any key pressed. So ",(0,l.kt)("inlineCode",{parentName:"li"},"Shift")," will be lifted before pressing\n",(0,l.kt)("inlineCode",{parentName:"li"},"f"),"."),(0,l.kt)("li",{parentName:"ul"},"Per\n",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code"},"KeyboardEvent.code"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('[ShiftLeft][KeyF][KeyO][KeyO]') // translates to: Shift, f, o, o\n"))),(0,l.kt)("li",{parentName:"ul"},"Per legacy ",(0,l.kt)("inlineCode",{parentName:"li"},"userEvent.type")," modifier/specialChar The modifiers like ",(0,l.kt)("inlineCode",{parentName:"li"},"{shift}"),"\n(note the lowercase) will automatically be kept pressed, just like before. You\ncan cancel this behavior by adding a ",(0,l.kt)("inlineCode",{parentName:"li"},"/")," to the end of the descriptor.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('{shift}{ctrl/}a{/shift}') // translates to: Shift(down), Control(down+up), a, Shift(up)\n")))),(0,l.kt)("p",null,"Keys can be kept pressed by adding a ",(0,l.kt)("inlineCode",{parentName:"p"},">")," to the end of the descriptor - and\nlifted by adding a ",(0,l.kt)("inlineCode",{parentName:"p"},"/")," to the beginning of the descriptor:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('{Shift>}A{/Shift}') // translates to: Shift(down), A, Shift(up)\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.keyboard")," returns a keyboard state that can be used to continue\nkeyboard operations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const keyboardState = userEvent.keyboard('[ControlLeft>]') // keydown [ControlLeft]\n// ... inspect some changes ...\nuserEvent.keyboard('a', {keyboardState}) // press [KeyA] with active ctrlKey modifier\n")),(0,l.kt)("p",null,"The mapping of ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"code")," is performed by a\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/testing-library/user-event/blob/main/src/keyboard/keyMap.ts"},"default key map"),'\nportraying a "default" US-keyboard. You can provide your own local keyboard\nmapping per option.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.keyboard('?', {keyboardMap: myOwnLocaleKeyboardMap})\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Future versions might try to interpolate the modifiers needed to reach a\nprintable key on the keyboard. E.g. Automatically pressing ",(0,l.kt)("inlineCode",{parentName:"p"},"{Shift}")," when\nCapsLock is not active and ",(0,l.kt)("inlineCode",{parentName:"p"},"A")," is referenced. If you don't wish this behavior,\nyou can pass ",(0,l.kt)("inlineCode",{parentName:"p"},"autoModify: false")," when using ",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.keyboard")," in your code.")),(0,l.kt)("h3",{id:"uploadelement-file--clickinit-changeinit--options"},(0,l.kt)("inlineCode",{parentName:"h3"},"upload(element, file, [{ clickInit, changeInit }], [options])")),(0,l.kt)("p",null,"Uploads file to an ",(0,l.kt)("inlineCode",{parentName:"p"},"<input>"),". For uploading multiple files use ",(0,l.kt)("inlineCode",{parentName:"p"},"<input>")," with\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"multiple")," attribute and the second ",(0,l.kt)("inlineCode",{parentName:"p"},"upload")," argument as an array. It's also\npossible to initialize a click or change event using a third argument."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"options.applyAccept")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," and there is an ",(0,l.kt)("inlineCode",{parentName:"p"},"accept")," attribute on\nthe element, files that don't match will be discarded."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('upload file', () => {\n  const file = new File(['hello'], 'hello.png', {type: 'image/png'})\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" />\n    </div>,\n  )\n  const input = screen.getByLabelText(/upload file/i)\n  userEvent.upload(input, file)\n\n  expect(input.files[0]).toStrictEqual(file)\n  expect(input.files.item(0)).toStrictEqual(file)\n  expect(input.files).toHaveLength(1)\n})\n\ntest('upload multiple files', () => {\n  const files = [\n    new File(['hello'], 'hello.png', {type: 'image/png'}),\n    new File(['there'], 'there.png', {type: 'image/png'}),\n  ]\n\n  render(\n    <div>\n      <label htmlFor=\"file-uploader\">Upload file:</label>\n      <input id=\"file-uploader\" type=\"file\" multiple />\n    </div>,\n  )\n  const input = screen.getByLabelText(/upload file/i)\n  userEvent.upload(input, files)\n\n  expect(input.files).toHaveLength(2)\n  expect(input.files[0]).toStrictEqual(files[0])\n  expect(input.files[1]).toStrictEqual(files[1])\n})\n")),(0,l.kt)("h3",{id:"clearelement"},(0,l.kt)("inlineCode",{parentName:"h3"},"clear(element)")),(0,l.kt)("p",null,"Selects the text inside an ",(0,l.kt)("inlineCode",{parentName:"p"},"<input>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"<textarea>")," and deletes it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('clear', () => {\n  render(<textarea defaultValue=\"Hello, World!\" />)\n\n  userEvent.clear(screen.getByRole('textbox'))\n  expect(screen.getByRole('textbox')).toHaveValue('')\n})\n")),(0,l.kt)("h3",{id:"selectoptionselement-values-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"selectOptions(element, values, options)")),(0,l.kt)("p",null,"Selects the specified option(s) of a ",(0,l.kt)("inlineCode",{parentName:"p"},"<select>")," or a ",(0,l.kt)("inlineCode",{parentName:"p"},"<select multiple>"),"\nelement."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('selectOptions', () => {\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  userEvent.selectOptions(screen.getByRole('listbox'), ['1', '3'])\n\n  expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)\n  expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)\n  expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)\n})\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"values")," parameter can be either an array of values or a singular scalar\nvalue."),(0,l.kt)("p",null,"It also accepts option nodes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"userEvent.selectOptions(screen.getByTestId('select-multiple'), [\n  screen.getByText('A'),\n  screen.getByText('B'),\n])\n")),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," includes ",(0,l.kt)("a",{parentName:"p",href:"#pointer-events-options"},"Pointer events options")),(0,l.kt)("h3",{id:"deselectoptionselement-values-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"deselectOptions(element, values, options)")),(0,l.kt)("p",null,"Remove the selection for the specified option(s) of a ",(0,l.kt)("inlineCode",{parentName:"p"},"<select multiple>"),"\nelement."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\n\ntest('deselectOptions', () => {\n  render(\n    <select multiple>\n      <option value=\"1\">A</option>\n      <option value=\"2\">B</option>\n      <option value=\"3\">C</option>\n    </select>,\n  )\n\n  userEvent.selectOptions(screen.getByRole('listbox'), '2')\n  expect(screen.getByText('B').selected).toBe(true)\n  userEvent.deselectOptions(screen.getByRole('listbox'), '2')\n  expect(screen.getByText('B').selected).toBe(false)\n  // can do multiple at once as well:\n  // userEvent.deselectOptions(screen.getByRole('listbox'), ['1', '2'])\n})\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"values")," parameter can be either an array of values or a singular scalar\nvalue."),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," includes ",(0,l.kt)("a",{parentName:"p",href:"#pointer-events-options"},"Pointer events options")),(0,l.kt)("h3",{id:"tabshift-focustrap"},(0,l.kt)("inlineCode",{parentName:"h3"},"tab({shift, focusTrap})")),(0,l.kt)("p",null,"Fires a tab event changing the document.activeElement in the same way the\nbrowser does."),(0,l.kt)("p",null,"Options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shift")," (default ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),") can be true or false to invert tab direction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"focusTrap")," (default ",(0,l.kt)("inlineCode",{parentName:"li"},"document"),") a container element to restrict the tabbing\nwithin.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"A note about tab"),":\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/jsdom/jsdom/issues/2102"},"jsdom does not support tabbing"),",\nso this feature is a way to enable tests to verify tabbing from the end user's\nperspective. However, this limitation in jsdom will mean that components like\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/davidtheclark/focus-trap-react"},"focus-trap-react")," will not\nwork with ",(0,l.kt)("inlineCode",{parentName:"p"},"userEvent.tab()")," or jsdom. For that reason, the ",(0,l.kt)("inlineCode",{parentName:"p"},"focusTrap")," option\nis available to let you ensure your user is restricted within a focus-trap.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport userEvent from '@testing-library/user-event'\n\nit('should cycle elements in document tab order', () => {\n  render(\n    <div>\n      <input data-testid=\"element\" type=\"checkbox\" />\n      <input data-testid=\"element\" type=\"radio\" />\n      <input data-testid=\"element\" type=\"number\" />\n    </div>,\n  )\n\n  const [checkbox, radio, number] = screen.getAllByTestId('element')\n\n  expect(document.body).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(checkbox).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(radio).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(number).toHaveFocus()\n\n  userEvent.tab()\n\n  // cycle goes back to the body element\n  expect(document.body).toHaveFocus()\n\n  userEvent.tab()\n\n  expect(checkbox).toHaveFocus()\n})\n")),(0,l.kt)("h3",{id:"hoverelement-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"hover(element, options)")),(0,l.kt)("p",null,"Hovers over ",(0,l.kt)("inlineCode",{parentName:"p"},"element"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport Tooltip from '../tooltip'\n\ntest('hover', () => {\n  const messageText = 'Hello'\n  render(\n    <Tooltip messageText={messageText}>\n      <TrashIcon aria-label=\"Delete\" />\n    </Tooltip>,\n  )\n\n  userEvent.hover(screen.getByLabelText(/delete/i))\n  expect(screen.getByText(messageText)).toBeInTheDocument()\n  userEvent.unhover(screen.getByLabelText(/delete/i))\n  expect(screen.queryByText(messageText)).not.toBeInTheDocument()\n})\n")),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," includes ",(0,l.kt)("a",{parentName:"p",href:"#pointer-events-options"},"Pointer events options")),(0,l.kt)("h3",{id:"unhoverelement-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"unhover(element, options)")),(0,l.kt)("p",null,"Unhovers out of ",(0,l.kt)("inlineCode",{parentName:"p"},"element"),"."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"See ",(0,l.kt)("a",{parentName:"p",href:"#hoverelement"},"above")," for an example")),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," includes ",(0,l.kt)("a",{parentName:"p",href:"#pointer-events-options"},"Pointer events options")),(0,l.kt)("h3",{id:"pasteelement-text-eventinit-options"},(0,l.kt)("inlineCode",{parentName:"h3"},"paste(element, text, eventInit, options)")),(0,l.kt)("p",null,"Allows you to simulate the user pasting some text into an input."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"test('should paste text in input', () => {\n  render(<MyInput />)\n\n  const text = 'Hello, world!'\n  const element = getByRole('textbox', {name: /paste your greeting/i})\n  userEvent.paste(element, text)\n  expect(element).toHaveValue(text)\n})\n")),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"eventInit")," if what you're pasting should have ",(0,l.kt)("inlineCode",{parentName:"p"},"clipboardData"),"\n(like ",(0,l.kt)("inlineCode",{parentName:"p"},"files"),")."),(0,l.kt)("h3",{id:"specialchars"},(0,l.kt)("inlineCode",{parentName:"h3"},"specialChars")),(0,l.kt)("p",null,"A handful set of special characters used in ",(0,l.kt)("a",{parentName:"p",href:"#typeelement-text-options"},"type"),"\nmethod."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Character"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arrowLeft"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowleft}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arrowRight"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowright}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arrowDown"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowdown}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arrowUp"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{arrowup}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"home"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{home}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"end"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{end}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"enter"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{enter}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"escape"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{esc}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{del}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"backspace"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{backspace}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"selectAll"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{selectall}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"space"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{space}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"whitespace"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"' '"))))),(0,l.kt)("p",null,"Usage example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useState} from 'react'\nimport {render, screen} from '@testing-library/react'\nimport userEvent, {specialChars} from '@testing-library/user-event'\n\nconst InputElement = () => {\n  const [currentValue, setCurrentValue] = useState('This is a bad example')\n  return (\n    <div>\n      <label htmlFor=\"my-input\">Example:</label>\n      <input\n        id=\"my-input\"\n        type=\"text\"\n        value={currentValue}\n        onChange={e => setCurrentValue(e.target.value)}\n      />\n    </div>\n  )\n}\n\ntest('delete characters within the selectedRange', () => {\n  render(<InputElement />)\n  const input = screen.getByLabelText(/example/i)\n  input.setSelectionRange(10, 13)\n  userEvent.type(input, `${specialChars.backspace}good`)\n\n  expect(input).toHaveValue('This is a good example')\n})\n")))}N.isMDXComponent=!0}}]);