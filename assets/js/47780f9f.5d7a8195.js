"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6991],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,f=d["".concat(i,".").concat(u)]||d[u]||l[u]||a;return n?r.createElement(f,c(c({ref:t},m),{},{components:n})):r.createElement(f,c({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],s={id:"example-react-context",title:"React Context"},i=void 0,p={unversionedId:"example-react-context",id:"example-react-context",title:"React Context",description:"",source:"@site/docs/example-react-context.mdx",sourceDirName:".",slug:"/example-react-context",permalink:"/docs/example-react-context",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-react-context.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-react-context",title:"React Context"},sidebar:"recipes",previous:{title:"Input Event",permalink:"/docs/example-input-event"},next:{title:"useReducer",permalink:"/docs/example-react-hooks-useReducer"}},m={},l=[],d={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {render, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport {NameContext, NameProvider, NameConsumer} from '../react-context'\n\n/**\n * Test default values by rendering a context consumer without a\n * matching provider\n */\ntest('NameConsumer shows default value', () => {\n  render(<NameConsumer />)\n  expect(screen.getByText(/^My Name Is:/)).toHaveTextContent(\n    'My Name Is: Unknown',\n  )\n})\n\n/**\n * A custom render to setup providers. Extends regular\n * render options with `providerProps` to allow injecting\n * different scenarios to test with.\n *\n * @see https://testing-library.com/docs/react-testing-library/setup#custom-render\n */\nconst customRender = (ui, {providerProps, ...renderOptions}) => {\n  return render(\n    <NameContext.Provider {...providerProps}>{ui}</NameContext.Provider>,\n    renderOptions,\n  )\n}\n\ntest('NameConsumer shows value from provider', () => {\n  const providerProps = {\n    value: 'C3PO',\n  }\n  customRender(<NameConsumer />, {providerProps})\n  expect(screen.getByText(/^My Name Is:/)).toHaveTextContent('My Name Is: C3P0')\n})\n\n/**\n * To test a component that provides a context value, render a matching\n * consumer as the child\n */\ntest('NameProvider composes full name from first, last', () => {\n  const providerProps = {\n    first: 'Boba',\n    last: 'Fett',\n  }\n  customRender(\n    <NameContext.Consumer>\n      {value => <span>Received: {value}</span>}\n    </NameContext.Consumer>,\n    {providerProps},\n  )\n  expect(screen.getByText(/^Received:/).textContent).toBe('Received: Boba Fett')\n})\n\n/**\n * A tree containing both a providers and consumer can be rendered normally\n */\ntest('NameProvider/Consumer shows name of character', () => {\n  const wrapper = ({children}) => (\n    <NameProvider first=\"Leia\" last=\"Organa\">\n      {children}\n    </NameProvider>\n  )\n\n  render(<NameConsumer />, {wrapper})\n  expect(screen.getByText(/^My Name Is:/).textContent).toBe(\n    'My Name Is: Leia Organa',\n  )\n})\n")))}u.isMDXComponent=!0}}]);