"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[5569],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>m});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],a={id:"example",title:"Example",sidebar_label:"Example"},l=void 0,p={unversionedId:"qwik-testing-library/example",id:"qwik-testing-library/example",title:"Example",description:"Below are some examples of how to use the Qwik Testing Library to test your",source:"@site/docs/qwik-testing-library/example.mdx",sourceDirName:"qwik-testing-library",slug:"/qwik-testing-library/example",permalink:"/docs/qwik-testing-library/example",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/qwik-testing-library/example.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example",title:"Example",sidebar_label:"Example"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/qwik-testing-library/intro"},next:{title:"Setup",permalink:"/docs/qwik-testing-library/setup"}},c={},m=[{value:"Qwikstart",id:"qwikstart",level:2},{value:"Qwik City - <code>server$</code> calls",id:"qwik-city---server-calls",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Below are some examples of how to use the Qwik Testing Library to test your\nQwik components."),(0,o.kt)("p",null,"You can also learn more about the ",(0,o.kt)("a",{parentName:"p",href:"/docs/queries/about"},(0,o.kt)("strong",{parentName:"a"},"queries"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-event/intro"},(0,o.kt)("strong",{parentName:"a"},"user\nevents"))," to help you write your tests."),(0,o.kt)("h2",{id:"qwikstart"},"Qwikstart"),(0,o.kt)("p",null,"This is a minimal setup to get you started, with line-by-line explanations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="counter.spec.tsx"',title:'"counter.spec.tsx"'},"// import qwik-testing methods\nimport {screen, render, waitFor} from '@noma.to/qwik-testing-library'\n// import the userEvent methods to interact with the DOM\nimport {userEvent} from '@testing-library/user-event'\n// import the component to be tested\nimport {Counter} from './counter'\n\n// describe the test suite\ndescribe('<Counter />', () => {\n  // describe the test case\n  it('should increment the counter', async () => {\n    // setup user event\n    const user = userEvent.setup()\n    // render the component into the DOM\n    await render(<Counter />)\n\n    // retrieve the 'increment count' button\n    const incrementBtn = screen.getByRole('button', {name: /increment count/})\n    // click the button twice\n    await user.click(incrementBtn)\n    await user.click(incrementBtn)\n\n    // assert that the counter is now 2\n    expect(await screen.findByText(/count:2/)).toBeInTheDocument()\n  })\n})\n")),(0,o.kt)("h2",{id:"qwik-city---server-calls"},"Qwik City - ",(0,o.kt)("inlineCode",{parentName:"h2"},"server$")," calls"),(0,o.kt)("p",null,"If one of your Qwik components uses ",(0,o.kt)("inlineCode",{parentName:"p"},"server$")," calls, your tests might fail with\na rather cryptic message (e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"QWIK ERROR __vite_ssr_import_0__.myServerFunctionQrl is not a function")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"QWIK ERROR Failed to parse URL from ?qfunc=DNpotUma33o"),")."),(0,o.kt)("p",null,"We're happy to discuss it on ",(0,o.kt)("a",{parentName:"p",href:"https://qwik.dev/chat"},"Discord"),", but we consider this failure to\nbe a good thing: your components should be tested in isolation, so you will be\nforced to mock your server functions."),(0,o.kt)("p",null,"Here is an example of how to test a component that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"server$")," calls:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="~/server/blog-post.ts"',title:'"~/server/blog-post.ts"'},"import {server$} from '@builder.io/qwik-city'\nimport {BlogPost} from '~/lib/blog-post'\n\nexport const getLatestPosts$ = server$(function (): Promise<BlogPost> {\n  // get the latest posts\n  return Promise.resolve([])\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="~/components/latest-post-list.tsx"',title:'"~/components/latest-post-list.tsx"'},"import {render, screen, waitFor} from '@noma.to/qwik-testing-library'\nimport {LatestPostList} from './latest-post-list'\n\nvi.mock('~/server/blog-posts', () => ({\n  // the mocked function should end with `Qrl` instead of `$`\n  getLatestPostsQrl: () => {\n    return Promise.resolve([\n      {id: 'post-1', title: 'Post 1'},\n      {id: 'post-2', title: 'Post 2'},\n    ])\n  },\n}))\n\ndescribe('<LatestPostList />', () => {\n  it('should render the latest posts', async () => {\n    await render(<LatestPostList />)\n\n    expect(await screen.findAllByRole('listitem')).toHaveLength(2)\n  })\n})\n")),(0,o.kt)("p",null,"Notice how the mocked function is ending with ",(0,o.kt)("inlineCode",{parentName:"p"},"Qrl")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"$"),", despite\nbeing named as ",(0,o.kt)("inlineCode",{parentName:"p"},"getLatestPosts$"),". This is caused by the Qwik optimizer renaming\nit to ",(0,o.kt)("inlineCode",{parentName:"p"},"Qrl"),". So, we need to mock the ",(0,o.kt)("inlineCode",{parentName:"p"},"Qrl")," function instead of the original ",(0,o.kt)("inlineCode",{parentName:"p"},"$"),"\none."),(0,o.kt)("p",null,"If your function doesn't end with ",(0,o.kt)("inlineCode",{parentName:"p"},"$"),", the Qwik optimizer will not rename it to\n",(0,o.kt)("inlineCode",{parentName:"p"},"Qrl"),"."))}d.isMDXComponent=!0}}]);