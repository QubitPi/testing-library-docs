"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[6013],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"guide-disappearance",title:"Appearance and Disappearance"},p=void 0,l={unversionedId:"guide-disappearance",id:"guide-disappearance",title:"Appearance and Disappearance",description:"Sometimes you need to test that an element is present and then disappears or",source:"@site/docs/guide-disappearance.mdx",sourceDirName:".",slug:"/guide-disappearance",permalink:"/docs/guide-disappearance",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/guide-disappearance.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"guide-disappearance",title:"Appearance and Disappearance"},sidebar:"docs",previous:{title:"Async Methods",permalink:"/docs/dom-testing-library/api-async"},next:{title:"Considerations for fireEvent",permalink:"/docs/guide-events"}},c={},u=[{value:"Waiting for appearance",id:"waiting-for-appearance",level:2},{value:"1. Using <code>findBy</code> Queries",id:"1-using-findby-queries",level:3},{value:"2. Using <code>waitFor</code>",id:"2-using-waitfor",level:3},{value:"Waiting for disappearance",id:"waiting-for-disappearance",level:2},{value:"Asserting elements are not present",id:"asserting-elements-are-not-present",level:2},{value:"<code>not.toBeInTheDocument</code>",id:"nottobeinthedocument",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Sometimes you need to test that an element is present and then disappears or\nvice versa."),(0,i.kt)("h2",{id:"waiting-for-appearance"},"Waiting for appearance"),(0,i.kt)("p",null,"If you need to wait for an element to appear, the ",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async"},"async wait\nutilities")," allow you to wait for an assertion to be satisfied before\nproceeding. The wait utilities retry until the query passes or times out. ",(0,i.kt)("em",{parentName:"p"},"The\nasync methods return a Promise, so you must always use ",(0,i.kt)("inlineCode",{parentName:"em"},"await")," or ",(0,i.kt)("inlineCode",{parentName:"em"},".then(done)"),"\nwhen calling them.")),(0,i.kt)("h3",{id:"1-using-findby-queries"},"1. Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"findBy")," Queries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"test('movie title appears', async () => {\n  // element is initially not present...\n  // wait for appearance and return the element\n  const movie = await findByText('the lion king')\n})\n")),(0,i.kt)("h3",{id:"2-using-waitfor"},"2. Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"waitFor")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"test('movie title appears', async () => {\n  // element is initially not present...\n\n  // wait for appearance inside an assertion\n  await waitFor(() => {\n    expect(getByText('the lion king')).toBeInTheDocument()\n  })\n})\n")),(0,i.kt)("h2",{id:"waiting-for-disappearance"},"Waiting for disappearance"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"waitForElementToBeRemoved")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async"},"async helper")," function uses a\ncallback to query for the element on each DOM mutation and resolves to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\nwhen the element is removed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"test('movie title no longer present in DOM', async () => {\n  // element is removed\n  await waitForElementToBeRemoved(() => queryByText('the mummy'))\n})\n")),(0,i.kt)("p",null,"Using\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"},(0,i.kt)("inlineCode",{parentName:"a"},"MutationObserver")),"\nis more efficient than polling the DOM at regular intervals with ",(0,i.kt)("inlineCode",{parentName:"p"},"waitFor"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"waitFor")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-async"},"async helper")," function retries until the wrapped\nfunction stops throwing an error. This can be used to assert that an element\ndisappears from the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"test('movie title goes away', async () => {\n  // element is initially present...\n  // note use of queryBy instead of getBy to return null\n  // instead of throwing in the query itself\n  await waitFor(() => {\n    expect(queryByText('i, robot')).not.toBeInTheDocument()\n  })\n})\n")),(0,i.kt)("h2",{id:"asserting-elements-are-not-present"},"Asserting elements are not present"),(0,i.kt)("p",null,"The standard ",(0,i.kt)("inlineCode",{parentName:"p"},"getBy")," methods throw an error when they can't find an element, so\nif you want to make an assertion that an element is ",(0,i.kt)("em",{parentName:"p"},"not")," present in the DOM,\nyou can use ",(0,i.kt)("inlineCode",{parentName:"p"},"queryBy")," APIs instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const submitButton = screen.queryByText('submit')\nexpect(submitButton).toBeNull() // it doesn't exist\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"queryAll")," APIs version return an array of matching nodes. The length of the\narray can be useful for assertions after elements are added or removed from the\nDOM."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const submitButtons = screen.queryAllByText('submit')\nexpect(submitButtons).toHaveLength(0) // expect no elements\n")),(0,i.kt)("h3",{id:"nottobeinthedocument"},(0,i.kt)("inlineCode",{parentName:"h3"},"not.toBeInTheDocument")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/ecosystem-jest-dom"},(0,i.kt)("inlineCode",{parentName:"a"},"jest-dom"))," utility library provides the\n",(0,i.kt)("inlineCode",{parentName:"p"},".toBeInTheDocument()")," matcher, which can be used to assert that an element is\nin the body of the document, or not. This can be more meaningful than asserting\na query result is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import '@testing-library/jest-dom'\n// use `queryBy` to avoid throwing an error with `getBy`\nconst submitButton = screen.queryByText('submit')\nexpect(submitButton).not.toBeInTheDocument()\n")))}m.isMDXComponent=!0}}]);