"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[8250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,y=m["".concat(c,".").concat(d)]||m[d]||l[d]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={id:"example-react-router",title:"React Router"},c=void 0,u={unversionedId:"example-react-router",id:"example-react-router",title:"React Router",description:"This example demonstrates React Router v6. For previous versions see below.",source:"@site/docs/example-react-router.mdx",sourceDirName:".",slug:"/example-react-router",permalink:"/docs/example-react-router",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/example-react-router.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"example-react-router",title:"React Router"},sidebar:"recipes",previous:{title:"React Redux",permalink:"/docs/example-react-redux"},next:{title:"Reach Router",permalink:"/docs/example-reach-router"}},p={},l=[{value:"Reducing boilerplate",id:"reducing-boilerplate",level:2},{value:"Testing Library and React Router v5",id:"testing-library-and-react-router-v5",level:2}],m={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example demonstrates React Router v6. For previous versions see below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// app.js\nimport React from \'react\'\nimport {Link, Route, Routes, useLocation} from \'react-router-dom\'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nexport const LocationDisplay = () => {\n  const location = useLocation()\n\n  return <div data-testid="location-display">{location.pathname}</div>\n}\n\nexport const App = () => (\n  <div>\n    <Link to="/">Home</Link>\n\n    <Link to="/about">About</Link>\n\n    <Routes>\n      <Route path="/" element={<Home />} />\n\n      <Route path="/about" element={<About />} />\n\n      <Route path="*" element={<NoMatch />} />\n    </Routes>\n\n    <LocationDisplay />\n  </div>\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// app.test.js\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport '@testing-library/jest-dom'\nimport {App, LocationDisplay} from './app'\nimport {BrowserRouter, MemoryRouter} from 'react-router-dom'\n\ntest('full app rendering/navigating', async () => {\n  render(<App />, {wrapper: BrowserRouter})\n  const user = userEvent.setup()\n\n  // verify page content for default route\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  // verify page content for expected route after navigating\n  await user.click(screen.getByText(/about/i))\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  const badRoute = '/some/bad/route'\n\n  // use <MemoryRouter> when you want to manually control the history\n  render(\n    <MemoryRouter initialEntries={[badRoute]}>\n      <App />\n    </MemoryRouter>,\n  )\n\n  // verify navigation to \"no match\" route\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n\ntest('rendering a component that uses useLocation', () => {\n  const route = '/some-route'\n\n  // use <MemoryRouter> when you want to manually control the history\n  render(\n    <MemoryRouter initialEntries={[route]}>\n      <LocationDisplay />\n    </MemoryRouter>,\n  )\n\n  // verify location display is rendered\n  expect(screen.getByTestId('location-display')).toHaveTextContent(route)\n})\n")),(0,a.kt)("h2",{id:"reducing-boilerplate"},"Reducing boilerplate"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"If you find yourself adding Router components to your tests a lot, you may\nwant to create a helper function that wraps around ",(0,a.kt)("inlineCode",{parentName:"li"},"render"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// test utils file\nconst renderWithRouter = (ui, {route = '/'} = {}) => {\n  window.history.pushState({}, 'Test page', route)\n\n  return {\n    user: userEvent.setup(),\n    ...render(ui, {wrapper: BrowserRouter}),\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// app.test.js\ntest('full app rendering/navigating', async () => {\n  const {user} = renderWithRouter(<App />)\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  await user.click(screen.getByText(/about/i))\n\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  renderWithRouter(<App />, {route: '/something-that-does-not-match'})\n\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n\ntest('rendering a component that uses useLocation', () => {\n  const route = '/some-route'\n  renderWithRouter(<LocationDisplay />, {route})\n\n  expect(screen.getByTestId('location-display')).toHaveTextContent(route)\n})\n")),(0,a.kt)("h2",{id:"testing-library-and-react-router-v5"},"Testing Library and React Router v5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// app.js\nimport React from \'react\'\nimport {Link, Route, Switch, useLocation} from \'react-router-dom\'\n\nconst About = () => <div>You are on the about page</div>\nconst Home = () => <div>You are home</div>\nconst NoMatch = () => <div>No match</div>\n\nexport const LocationDisplay = () => {\n  const location = useLocation()\n\n  return <div data-testid="location-display">{location.pathname}</div>\n}\n\nexport const App = () => (\n  <div>\n    <Link to="/">Home</Link>\n\n    <Link to="/about">About</Link>\n\n    <Switch>\n      <Route exact path="/" component={Home} />\n\n      <Route path="/about" component={About} />\n\n      <Route component={NoMatch} />\n    </Switch>\n\n    <LocationDisplay />\n  </div>\n)\n')),(0,a.kt)("p",null,"In your tests, pass the history object as a whole to the Router component.\n",(0,a.kt)("strong",{parentName:"p"},"Note:")," React Router v5\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/remix-run/history#documentation"},"only works with History v4"),",\nso make sure you have the correct version of ",(0,a.kt)("inlineCode",{parentName:"p"},"history")," installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// app.test.js\nimport {render, screen} from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {createMemoryHistory} from 'history'\nimport React from 'react'\nimport {Router} from 'react-router-dom'\nimport '@testing-library/jest-dom'\nimport {App} from './app'\n\n// React Router v5\n\ntest('full app rendering/navigating', async () => {\n  const history = createMemoryHistory()\n  render(\n    <Router history={history}>\n      <App />\n    </Router>,\n  )\n  const user = userEvent.setup()\n  // verify page content for expected route\n  // often you'd use a data-testid or role query, but this is also possible\n  expect(screen.getByText(/you are home/i)).toBeInTheDocument()\n\n  await user.click(screen.getByText(/about/i))\n\n  // check that the content changed to the new page\n  expect(screen.getByText(/you are on the about page/i)).toBeInTheDocument()\n})\n\ntest('landing on a bad page', () => {\n  const history = createMemoryHistory()\n  history.push('/some/bad/route')\n  render(\n    <Router history={history}>\n      <App />\n    </Router>,\n  )\n\n  expect(screen.getByText(/no match/i)).toBeInTheDocument()\n})\n")))}d.isMDXComponent=!0}}]);