"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[4548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),i=n(6010),o=n(2389),s=n(7392),l=n(7094),u=n(2466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){var t,n,o=e.lazy,c=e.block,d=e.defaultValue,g=e.values,y=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,s.l)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===d?d:null!=(t=null!=d?d:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:h[0].props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),j=N.tabGroupChoices,w=N.setTabGroupChoices,C=(0,r.useState)(v),T=C[0],x=C[1],q=[],E=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var A=j[y];null!=A&&A!==T&&k.some((function(e){return e.value===A}))&&x(A)}var D=function(e){var t=e.currentTarget,n=q.indexOf(t),a=k[n].value;a!==T&&(E(t),x(a),null!=y&&w(y,String(a)))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=q.indexOf(e.currentTarget)+1;n=null!=(a=q[r])?a:q[0];break;case"ArrowLeft":var i,o=q.indexOf(e.currentTarget)-1;n=null!=(i=q[o])?i:q[q.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},f)},k.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return q.push(e)},onKeyDown:I,onFocus:D,onClick:D},o,{className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function d(e){var t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},9076:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>y,frontMatter:()=>u,metadata:()=>m,toc:()=>d});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=n(5488),s=n(5162),l=["components"],u={id:"setup",title:"Setup",sidebar_label:"Setup"},p=void 0,m={unversionedId:"react-testing-library/setup",id:"react-testing-library/setup",title:"Setup",description:"React Testing Library does not require any configuration to be used. However,",source:"@site/docs/react-testing-library/setup.mdx",sourceDirName:"react-testing-library",slug:"/react-testing-library/setup",permalink:"/docs/react-testing-library/setup",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/react-testing-library/setup.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750828179,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"setup",title:"Setup",sidebar_label:"Setup"},sidebar:"docs",previous:{title:"Example",permalink:"/docs/react-testing-library/example-intro"},next:{title:"API",permalink:"/docs/react-testing-library/api"}},c={},d=[{value:"Global Config",id:"global-config",level:2},{value:"Custom Render",id:"custom-render",level:2},{value:"Add custom queries",id:"add-custom-queries",level:3},{value:"Configuring Jest with Test Utils",id:"configuring-jest-with-test-utils",level:3},{value:"Jest 28",id:"jest-28",level:3},{value:"Jest 27",id:"jest-27",level:3},{value:"Jest 24 (or lower) and defaults",id:"jest-24-or-lower-and-defaults",level:3},{value:"Using without Jest",id:"using-without-jest",level:2},{value:"Skipping Auto Cleanup",id:"skipping-auto-cleanup",level:3},{value:"Auto Cleanup in Mocha&#39;s watch mode",id:"auto-cleanup-in-mochas-watch-mode",level:3},{value:"Auto Cleanup in Vitest",id:"auto-cleanup-in-vitest",level:3}],g={toc:d};function y(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"React Testing Library")," does not require any configuration to be used. However,\nthere are some things you can do when configuring your testing framework to\nreduce some boilerplate. In these docs we'll demonstrate configuring Jest, but\nyou should be able to do similar things with\n",(0,i.kt)("a",{parentName:"p",href:"#using-without-jest"},"any testing framework")," (React Testing Library does not\nrequire that you use Jest)."),(0,i.kt)("h2",{id:"global-config"},"Global Config"),(0,i.kt)("p",null,"Adding options to your global test config can simplify the setup and teardown of\ntests in individual files."),(0,i.kt)("h2",{id:"custom-render"},"Custom Render"),(0,i.kt)("p",null,"It's often useful to define a custom render method that includes things like\nglobal context providers, data stores, etc. To make this available globally, one\napproach is to define a utility file that re-exports everything from\n",(0,i.kt)("inlineCode",{parentName:"p"},"React Testing Library"),". You can replace React Testing Library with this file in\nall your imports. See ",(0,i.kt)("a",{parentName:"p",href:"#configuring-jest-with-test-utils"},"below")," for a way to\nmake your test util file accessible without using relative paths."),(0,i.kt)("p",null,"The example below sets up data providers using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-testing-library/api#wrapper"},(0,i.kt)("inlineCode",{parentName:"a"},"wrapper")),"\noption to ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),"."),(0,i.kt)(o.Z,{groupId:"test-utils",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="my-component.test.jsx"',title:'"my-component.test.jsx"'},"- import { render, fireEvent } from '@testing-library/react';\n+ import { render, fireEvent } from '../test-utils';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="test-utils.jsx"',title:'"test-utils.jsx"'},"import React from 'react'\nimport {render} from '@testing-library/react'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (ui, options) =>\n  render(ui, {wrapper: AllTheProviders, ...options})\n\n// re-export everything\nexport * from '@testing-library/react'\n\n// override render method\nexport {customRender as render}\n"))),(0,i.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="my-component.test.tsx"',title:'"my-component.test.tsx"'},"- import { render, fireEvent } from '@testing-library/react';\n+ import { render, fireEvent } from '../test-utils';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="test-utils.tsx"',title:'"test-utils.tsx"'},"import React, {ReactElement} from 'react'\nimport {render, RenderOptions} from '@testing-library/react'\nimport {ThemeProvider} from 'my-ui-lib'\nimport {TranslationProvider} from 'my-i18n-lib'\nimport defaultStrings from 'i18n/en-x-default'\n\nconst AllTheProviders = ({children}: {children: React.ReactNode}) => {\n  return (\n    <ThemeProvider theme=\"light\">\n      <TranslationProvider messages={defaultStrings}>\n        {children}\n      </TranslationProvider>\n    </ThemeProvider>\n  )\n}\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>,\n) => render(ui, {wrapper: AllTheProviders, ...options})\n\nexport * from '@testing-library/react'\nexport {customRender as render}\n")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",{parentName:"blockquote"},"Babel versions lower than 7 throw an error when trying to override the named\nexport in the example above. See\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/testing-library/react-testing-library/issues/169"},"#169"),"\nand the workaround below.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Workaround for Babel 6"),(0,i.kt)("p",null,"You can use CommonJS modules instead of ES modules, which should work in Node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="test-utils.js"',title:'"test-utils.js"'},"const rtl = require('@testing-library/react')\n\nconst customRender = (ui, options) =>\n  rtl.render(ui, {\n    myDefaultOption: 'something',\n    ...options,\n  })\n\nmodule.exports = {\n  ...rtl,\n  render: customRender,\n}\n"))),(0,i.kt)("h3",{id:"add-custom-queries"},"Add custom queries"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",{parentName:"blockquote"},"Generally you should not need to create custom queries for\nreact-testing-library. Where you do use it, you should consider whether your\nnew queries encourage you to test in a user-centric way, without testing\nimplementation details.")),(0,i.kt)("p",null,"You can define your own custom queries as described in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-custom-queries"},"Custom Queries")," documentation, or\nvia the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/dom-testing-library/api-custom-queries#buildqueries"},(0,i.kt)("inlineCode",{parentName:"a"},"buildQueries")),"\nhelper. Then you can use them in any render call using the ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," option. To\nmake the custom queries available globally, you can add them to your custom\nrender method as shown below."),(0,i.kt)("p",null,"In the example below, a new set of query variants are created for getting\nelements by ",(0,i.kt)("inlineCode",{parentName:"p"},"data-cy"),', a "test ID" convention mentioned in the\n',(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements"},"Cypress.io"),"\ndocumentation."),(0,i.kt)(o.Z,{groupId:"test-utils",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="custom-queries.js"',title:'"custom-queries.js"'},"import {queryHelpers, buildQueries} from '@testing-library/react'\n\n// The queryAllByAttribute is a shortcut for attribute-based matchers\n// You can also use document.querySelector or a combination of existing\n// testing library utilities to find matching nodes for your query\nconst queryAllByDataCy = (...args) =>\n  queryHelpers.queryAllByAttribute('data-cy', ...args)\n\nconst getMultipleError = (c, dataCyValue) =>\n  `Found multiple elements with the data-cy attribute of: ${dataCyValue}`\nconst getMissingError = (c, dataCyValue) =>\n  `Unable to find an element with the data-cy attribute of: ${dataCyValue}`\n\nconst [\n  queryByDataCy,\n  getAllByDataCy,\n  getByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n] = buildQueries(queryAllByDataCy, getMultipleError, getMissingError)\n\nexport {\n  queryByDataCy,\n  queryAllByDataCy,\n  getByDataCy,\n  getAllByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n}\n"))),(0,i.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="custom-queries.ts"',title:'"custom-queries.ts"'},"import {\n  queryHelpers,\n  buildQueries,\n  Matcher,\n  MatcherOptions,\n} from '@testing-library/react'\n\n// The queryAllByAttribute is a shortcut for attribute-based matchers\n// You can also use document.querySelector or a combination of existing\n// testing library utilities to find matching nodes for your query\nconst queryAllByDataCy = (\n  container: HTMLElement,\n  id: Matcher,\n  options?: MatcherOptions | undefined,\n) => queryHelpers.queryAllByAttribute('data-cy', container, id, options)\n\nconst getMultipleError = (c, dataCyValue) =>\n  `Found multiple elements with the data-cy attribute of: ${dataCyValue}`\nconst getMissingError = (c, dataCyValue) =>\n  `Unable to find an element with the data-cy attribute of: ${dataCyValue}`\n\nconst [\n  queryByDataCy,\n  getAllByDataCy,\n  getByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n] = buildQueries(queryAllByDataCy, getMultipleError, getMissingError)\n\nexport {\n  queryByDataCy,\n  queryAllByDataCy,\n  getByDataCy,\n  getAllByDataCy,\n  findAllByDataCy,\n  findByDataCy,\n}\n")))),(0,i.kt)("p",null,"You can then override and append the new queries via the render function by\npassing a ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-testing-library/api#render-options"},(0,i.kt)("inlineCode",{parentName:"a"},"queries"))," option."),(0,i.kt)("p",null,"If you want to add custom queries globally, you can do this by defining your\ncustomized ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"screen")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"within")," methods:"),(0,i.kt)(o.Z,{groupId:"test-utils",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="test-utils.js"',title:'"test-utils.js"'},"import {render, queries, within} from '@testing-library/react'\nimport * as customQueries from './custom-queries'\n\nconst allQueries = {\n  ...queries,\n  ...customQueries,\n}\n\nconst customScreen = within(document.body, allQueries)\nconst customWithin = element => within(element, allQueries)\nconst customRender = (ui, options) =>\n  render(ui, {queries: allQueries, ...options})\n\n// re-export everything\nexport * from '@testing-library/react'\n\n// override render method\nexport {customScreen as screen, customWithin as within, customRender as render}\n"))),(0,i.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="test-utils.ts"',title:'"test-utils.ts"'},"import {render, queries, within, RenderOptions} from '@testing-library/react'\nimport * as customQueries from './custom-queries'\nimport {ReactElement} from 'react'\n\nconst allQueries = {\n  ...queries,\n  ...customQueries,\n}\n\nconst customScreen = within(document.body, allQueries)\nconst customWithin = (element: ReactElement) => within(element, allQueries)\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, 'queries'>,\n) => render(ui, {queries: allQueries, ...options})\n\nexport * from '@testing-library/react'\nexport {customScreen as screen, customWithin as within, customRender as render}\n")))),(0,i.kt)("p",null,"You can then use your custom queries as you would any other query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {getByDataCy} = render(<Component />)\n\nexpect(getByDataCy('my-component')).toHaveTextContent('Hello')\n")),(0,i.kt)("h3",{id:"configuring-jest-with-test-utils"},"Configuring Jest with Test Utils"),(0,i.kt)("p",null,"To make your custom test file accessible in your Jest test files without using\nrelative imports (",(0,i.kt)("inlineCode",{parentName:"p"},"../../test-utils"),"), add the folder containing the file to the\nJest ",(0,i.kt)("inlineCode",{parentName:"p"},"moduleDirectories")," option."),(0,i.kt)("p",null,"This will make all the ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," files in the test-utils directory importable\nwithout ",(0,i.kt)("inlineCode",{parentName:"p"},"../"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="my-component.test.js"',title:'"my-component.test.js"'},"- import { render, fireEvent } from '../test-utils';\n+ import { render, fireEvent } from 'test-utils';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="jest.config.js"',title:'"jest.config.js"'},"module.exports = {\n  moduleDirectories: [\n    'node_modules',\n+   // add the directory with the test-utils.js file, for example:\n+   'utils', // a utility folder\n+    __dirname, // the root directory\n  ],\n  // ... other options ...\n}\n")),(0,i.kt)("p",null,"If you're using TypeScript, merge this into your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),".\xa0If you're\nusing Create React App without TypeScript, save this to ",(0,i.kt)("inlineCode",{parentName:"p"},"jsconfig.json")," instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "compilerOptions": {\n    "baseUrl": "src",\n    "paths": {\n      "test-utils": ["./utils/test-utils"]\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"jest-28"},"Jest 28"),(0,i.kt)("p",null,"If you're using Jest 28 or later, jest-environment-jsdom package now must be\ninstalled separately."),(0,i.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev jest-environment-jsdom\n"))),(0,i.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev jest-environment-jsdom\n")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," is also no longer the default environment. You can enable ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom"),"\nglobally by editing ",(0,i.kt)("inlineCode",{parentName:"p"},"jest.config.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="jest.config.js"',title:'"jest.config.js"'}," module.exports = {\n+  testEnvironment: 'jsdom',\n   // ... other options ...\n }\n")),(0,i.kt)("p",null,"Or if you only need ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," in some of your tests, you can enable it as and when\nneeded using\n",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/configuration#testenvironment-string"},"docblocks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @jest-environment jsdom\n */\n")),(0,i.kt)("h3",{id:"jest-27"},"Jest 27"),(0,i.kt)("p",null,"If you're using a recent version of Jest (27), ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," is no longer the default\nenvironment. You can enable ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," globally by editing ",(0,i.kt)("inlineCode",{parentName:"p"},"jest.config.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="jest.config.js"',title:'"jest.config.js"'}," module.exports = {\n+  testEnvironment: 'jest-environment-jsdom',\n   // ... other options ...\n }\n")),(0,i.kt)("p",null,"Or if you only need ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," in some of your tests, you can enable it as and when\nneeded using\n",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/configuration#testenvironment-string"},"docblocks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @jest-environment jsdom\n */\n")),(0,i.kt)("h3",{id:"jest-24-or-lower-and-defaults"},"Jest 24 (or lower) and defaults"),(0,i.kt)("p",null,"If you're using the Jest testing framework version 24 or lower with the default\nconfiguration, it's recommended to use ",(0,i.kt)("inlineCode",{parentName:"p"},"jest-environment-jsdom-fifteen")," package\nas Jest uses a version of the jsdom environment that misses some features and\nfixes, required by React Testing Library."),(0,i.kt)("p",null,"First, install ",(0,i.kt)("inlineCode",{parentName:"p"},"jest-environment-jsdom-fifteen"),"."),(0,i.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev jest-environment-jsdom-fifteen\n"))),(0,i.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev jest-environment-jsdom-fifteen\n")))),(0,i.kt)("p",null,"Then specify ",(0,i.kt)("inlineCode",{parentName:"p"},"jest-environment-jsdom-fifteen")," as the ",(0,i.kt)("inlineCode",{parentName:"p"},"testEnvironment"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="jest.config.js"',title:'"jest.config.js"'}," module.exports = {\n+  testEnvironment: 'jest-environment-jsdom-fifteen',\n   // ... other options ...\n }\n")),(0,i.kt)("h2",{id:"using-without-jest"},"Using without Jest"),(0,i.kt)("p",null,"If you're running your tests in the browser bundled with webpack (or similar)\nthen ",(0,i.kt)("inlineCode",{parentName:"p"},"React Testing Library")," should work out of the box for you. However, most\npeople using React Testing Library are using it with the Jest testing framework\nwith the ",(0,i.kt)("inlineCode",{parentName:"p"},"testEnvironment")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"jest-environment-jsdom")," (which is the default\nconfiguration with Jest 26 and earlier)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," is a pure JavaScript implementation of the DOM and browser APIs that\nruns in Node. If you're not using Jest and you would like to run your tests in\nNode, then you must install jsdom yourself. There's also a package called\n",(0,i.kt)("inlineCode",{parentName:"p"},"global-jsdom")," which can be used to setup the global environment to simulate the\nbrowser APIs."),(0,i.kt)("p",null,"First, install ",(0,i.kt)("inlineCode",{parentName:"p"},"jsdom")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"global-jsdom"),"."),(0,i.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev jsdom global-jsdom\n"))),(0,i.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev jsdom global-jsdom\n")))),(0,i.kt)("p",null,"With mocha, the test command would look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mocha --require global-jsdom/register\n")),(0,i.kt)("h3",{id:"skipping-auto-cleanup"},"Skipping Auto Cleanup"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/react-testing-library/api#cleanup"},(0,i.kt)("inlineCode",{parentName:"a"},"Cleanup"))," is called after each test automatically by default\nif the testing framework you're using supports the ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," global (like\nmocha, Jest, and Jasmine). However, you may choose to skip the auto cleanup by\nsetting the ",(0,i.kt)("inlineCode",{parentName:"p"},"RTL_SKIP_AUTO_CLEANUP")," env variable to 'true'. You can do this with\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kentcdodds/cross-env"},(0,i.kt)("inlineCode",{parentName:"a"},"cross-env"))," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cross-env RTL_SKIP_AUTO_CLEANUP=true jest\n")),(0,i.kt)("p",null,"To make this even easier, you can also simply import\n",(0,i.kt)("inlineCode",{parentName:"p"},"@testing-library/react/dont-cleanup-after-each")," which will do the same thing.\nJust make sure you do this before importing ",(0,i.kt)("inlineCode",{parentName:"p"},"@testing-library/react"),". You could\ndo this with Jest's ",(0,i.kt)("inlineCode",{parentName:"p"},"setupFiles")," configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  // ... other jest config\n  setupFiles: ['@testing-library/react/dont-cleanup-after-each']\n}\n")),(0,i.kt)("p",null,"Or with mocha's ",(0,i.kt)("inlineCode",{parentName:"p"},"-r")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mocha --require @testing-library/react/dont-cleanup-after-each\n")),(0,i.kt)("p",null,"Alternatively, you could import ",(0,i.kt)("inlineCode",{parentName:"p"},"@testing-library/react/pure")," in all your tests\nthat you don't want the ",(0,i.kt)("inlineCode",{parentName:"p"},"cleanup")," to run and the ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," won't be setup\nautomatically."),(0,i.kt)("h3",{id:"auto-cleanup-in-mochas-watch-mode"},"Auto Cleanup in Mocha's watch mode"),(0,i.kt)("p",null,"When using Mocha in watch mode, the globally registered cleanup is run only the\nfirst time after each test. Therefore, subsequent runs will most likely fail\nwith a ",(0,i.kt)("em",{parentName:"p"},"TestingLibraryElementError: Found multiple elements")," error."),(0,i.kt)("p",null,"To enable automatic cleanup in Mocha's watch mode, add a cleanup\n",(0,i.kt)("a",{parentName:"p",href:"https://mochajs.org/#root-hook-plugins"},"root hook"),". Create a\n",(0,i.kt)("inlineCode",{parentName:"p"},"mocha-watch-cleanup-after-each.js")," file with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="mocha-watch-cleanup-after-each.js"',title:'"mocha-watch-cleanup-after-each.js"'},"const {cleanup} = require('@testing-library/react')\n\nexports.mochaHooks = {\n  afterEach() {\n    cleanup()\n  },\n}\n")),(0,i.kt)("p",null,"And register it using mocha's ",(0,i.kt)("inlineCode",{parentName:"p"},"-r")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mocha --require ./mocha-watch-cleanup-after-each.js\n")),(0,i.kt)("h3",{id:"auto-cleanup-in-vitest"},"Auto Cleanup in Vitest"),(0,i.kt)("p",null,"If you're using Vitest and want automatic cleanup to work, you can\n",(0,i.kt)("a",{parentName:"p",href:"https://vitest.dev/config/#globals"},"enable globals")," through its configuration\nfile:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="vitest.config.ts"',title:'"vitest.config.ts"'},"import {defineConfig} from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n  },\n})\n")),(0,i.kt)("p",null,"If you don't want to enable globals, you can import ",(0,i.kt)("inlineCode",{parentName:"p"},"cleanup")," and call it\nmanually in a top-level ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="vitest.config.ts"',title:'"vitest.config.ts"'},"import {defineConfig} from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    setupFiles: ['vitest-cleanup-after-each.ts'],\n  },\n})\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="vitest-cleanup-after-each.ts"',title:'"vitest-cleanup-after-each.ts"'},"import {cleanup} from '@testing-library/react'\nimport {afterEach} from 'vitest'\n\nafterEach(() => {\n  cleanup()\n})\n")))}y.isMDXComponent=!0}}]);