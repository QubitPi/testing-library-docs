"use strict";(self.webpackChunkreact_testing_library_docs=self.webpackChunkreact_testing_library_docs||[]).push([[4438],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,y=c["".concat(l,".").concat(m)]||c[m]||p[m]||a;return n?r.createElement(y,o(o({ref:t},d),{},{components:n})):r.createElement(y,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={id:"api-custom-queries",title:"Custom Queries"},l=void 0,u={unversionedId:"dom-testing-library/api-custom-queries",id:"dom-testing-library/api-custom-queries",title:"Custom Queries",description:"DOM Testing Library exposes many of the helper functions that are used to",source:"@site/docs/dom-testing-library/api-custom-queries.mdx",sourceDirName:"dom-testing-library",slug:"/dom-testing-library/api-custom-queries",permalink:"/docs/dom-testing-library/api-custom-queries",draft:!1,editUrl:"https://github.com/testing-library/testing-library-docs/edit/main/docs/dom-testing-library/api-custom-queries.mdx",tags:[],version:"current",lastUpdatedBy:"Jiaqi Liu",lastUpdatedAt:1750827853,formattedLastUpdatedAt:"Jun 25, 2025",frontMatter:{id:"api-custom-queries",title:"Custom Queries"},sidebar:"docs",previous:{title:"Accessibility",permalink:"/docs/dom-testing-library/api-accessibility"},next:{title:"Debugging",permalink:"/docs/dom-testing-library/api-debugging"}},d={},p=[{value:"<code>buildQueries</code>",id:"buildqueries",level:2},{value:"Using other assertion libraries",id:"using-other-assertion-libraries",level:3},{value:"<code>getNodeText</code>",id:"getnodetext",level:2}],c={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DOM Testing Library")," exposes many of the helper functions that are used to\nimplement the default queries. You can use the helpers to build custom queries.\nFor example, the code below shows a way to override the default ",(0,a.kt)("inlineCode",{parentName:"p"},"testId")," queries\nto use a different data-attribute. (Note: test files would import\n",(0,a.kt)("inlineCode",{parentName:"p"},"test-utils.js")," instead of using ",(0,a.kt)("inlineCode",{parentName:"p"},"DOM Testing Library")," directly)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note")),(0,a.kt)("p",{parentName:"blockquote"},"Custom queries can be added to ",(0,a.kt)("inlineCode",{parentName:"p"},"React Testing Library"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," method by\nadding ",(0,a.kt)("inlineCode",{parentName:"p"},"queries")," to the options config object. See the render\n",(0,a.kt)("a",{parentName:"p",href:"/docs/react-testing-library/api#render-options"},"options"),".")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Custom queries are different than\n",(0,a.kt)("a",{parentName:"p",href:"/docs/react-testing-library/setup#custom-render"},"custom render")," methods.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="test-utils.js"',title:'"test-utils.js"'},"const domTestingLib = require('@testing-library/dom')\nconst {queryHelpers} = domTestingLib\n\nexport const queryByTestId = queryHelpers.queryByAttribute.bind(\n  null,\n  'data-test-id',\n)\nexport const queryAllByTestId = queryHelpers.queryAllByAttribute.bind(\n  null,\n  'data-test-id',\n)\n\nexport function getAllByTestId(container, id, ...rest) {\n  const els = queryAllByTestId(container, id, ...rest)\n  if (!els.length) {\n    throw queryHelpers.getElementError(\n      `Unable to find an element by: [data-test-id=\"${id}\"]`,\n      container,\n    )\n  }\n  return els\n}\n\nexport function getByTestId(container, id, ...rest) {\n  // result >= 1\n  const result = getAllByTestId(container, id, ...rest)\n  if (result.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple elements with the [data-test-id=\"${id}\"]`,\n      container,\n    )\n  }\n  return result[0]\n}\n\n// re-export with overrides\nmodule.exports = {\n  ...domTestingLib,\n  getByTestId,\n  getAllByTestId,\n  queryByTestId,\n  queryAllByTestId,\n}\n")),(0,a.kt)("h2",{id:"buildqueries"},(0,a.kt)("inlineCode",{parentName:"h2"},"buildQueries")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"buildQueries")," helper allows you to create custom queries with all the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/queries/about"},"standard queries")," in testing-library."),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/docs/react-testing-library/setup#add-custom-queries"},"Add custom queries"),"\nsection of the custom render guide for example usage."),(0,a.kt)("h3",{id:"using-other-assertion-libraries"},"Using other assertion libraries"),(0,a.kt)("p",null,"If you're not using jest, you may be able to find a similar set of custom\nassertions for your library of choice. Here's a list of alternatives to jest-dom\nfor other popular assertion libraries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/nathanboktae/chai-dom"},"chai-dom"))),(0,a.kt)("p",null,"If you're aware of some other alternatives, please\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/testing-library/testing-library-docs/pulls"},"make a pull request"),"\nand add it here!"),(0,a.kt)("h2",{id:"getnodetext"},(0,a.kt)("inlineCode",{parentName:"h2"},"getNodeText")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"getNodeText(node: HTMLElement)\n")),(0,a.kt)("p",null,"Returns the complete text content of an HTML element, removing any extra\nwhitespace. The intention is to treat text in nodes exactly as how it is\nperceived by users in a browser, where any extra whitespace within words in the\nhtml code is not meaningful when the text is rendered."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// <div>\n//   Hello\n//     World  !\n// </div>\nconst text = getNodeText(container.querySelector('div')) // \"Hello World !\"\n")),(0,a.kt)("p",null,"This function is also used internally when querying nodes by their text content.\nThis enables functions like ",(0,a.kt)("inlineCode",{parentName:"p"},"getByText")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"queryByText")," to work as expected,\nfinding elements in the DOM similarly to how users would do."),(0,a.kt)("p",null,"The function has a special behavior for some input elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// <input type="submit" value="Send data" />\n// <input type="button" value="Push me" />\nconst submitText = getNodeText(container.querySelector(\'input[type=submit]\')) // "Send data"\nconst buttonText = getNodeText(container.querySelector(\'input[type=button]\')) // "Push me"\n\nThese elements use the attribute `value` and display its value to the user.\n')))}m.isMDXComponent=!0}}]);